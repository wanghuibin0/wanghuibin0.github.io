<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>cpp - 标签 - Hibert's blog</title><link>https://wanghuibin0.github.io/tags/cpp/</link><description>cpp - 标签 - Hibert's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 16 Feb 2022 14:30:00 +0800</lastBuildDate><atom:link href="https://wanghuibin0.github.io/tags/cpp/" rel="self" type="application/rss+xml"/><item><title>从语义的角度理解std::move</title><link>https://wanghuibin0.github.io/posts/2022/02/cpp-stdmove/</link><pubDate>Wed, 16 Feb 2022 14:30:00 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2022/02/cpp-stdmove/</guid><description>问题 所谓右值rvalue，表明这个对象是一个临时对象，它所拥有的资源可以随时被回收。 而对于左值，机器会保证它所拥有的资源在生存期内一直有效。</description></item><item><title>完美转发与std::forward</title><link>https://wanghuibin0.github.io/posts/2022/02/cpp-stdforward/</link><pubDate>Wed, 16 Feb 2022 14:30:00 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2022/02/cpp-stdforward/</guid><description>问题 一个模板函数f调用另一个函数g时，要将自己的参数转发给g，在转发过程中，有时我们想要保持被转发参数的类型不变，包括是否是const，是左</description></item><item><title>C++值分类</title><link>https://wanghuibin0.github.io/posts/2022/02/cpp-value-category/</link><pubDate>Wed, 16 Feb 2022 12:32:00 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2022/02/cpp-value-category/</guid><description>xvalue代表将亡值。典型的就是std::move形成的值。 参考：Value categories - cppreference.com</description></item></channel></rss>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>方法学 - 标签 - Hibert's blog</title><link>https://wanghuibin0.github.io/tags/%E6%96%B9%E6%B3%95%E5%AD%A6/</link><description>方法学 - 标签 - Hibert's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 06 Feb 2022 16:41:00 +0800</lastBuildDate><atom:link href="https://wanghuibin0.github.io/tags/%E6%96%B9%E6%B3%95%E5%AD%A6/" rel="self" type="application/rss+xml"/><item><title>读书笔记-设计模式-创建型模式</title><link>https://wanghuibin0.github.io/posts/2022/02/design-pattern-2/</link><pubDate>Sun, 06 Feb 2022 16:41:00 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2022/02/design-pattern-2/</guid><description>简单工厂模式 场景 创建一系列类似的产品，这些产品有差异，但属于同一类 方案 创建产品的基类，为抽象产品 一系列具体的产品继承自抽象产品 创建一个工厂类</description></item><item><title>读书笔记-设计模式-引言</title><link>https://wanghuibin0.github.io/posts/2022/02/design-pattern-1/</link><pubDate>Sun, 06 Feb 2022 11:49:53 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2022/02/design-pattern-1/</guid><description>什么是设计模式 特定场景下一类问题的通用解决方案。 需要说明的是，设计模式跟所使用的编程语言是很相关的。 比如，面向对象语言中的一些行为型模式在函</description></item></channel></rss>
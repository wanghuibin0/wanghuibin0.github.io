<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>编程语言 - 分类 - Hibert's blog</title><link>https://wanghuibin0.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><description>编程语言 - 分类 - Hibert's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 16 Feb 2022 14:30:00 +0800</lastBuildDate><atom:link href="https://wanghuibin0.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/" rel="self" type="application/rss+xml"/><item><title>从语义的角度理解std::move</title><link>https://wanghuibin0.github.io/posts/2022/02/cpp-stdmove/</link><pubDate>Wed, 16 Feb 2022 14:30:00 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2022/02/cpp-stdmove/</guid><description>问题 所谓右值rvalue，表明这个对象是一个临时对象，它所拥有的资源可以随时被回收。 而对于左值，机器会保证它所拥有的资源在生存期内一直有效。</description></item><item><title>完美转发与std::forward</title><link>https://wanghuibin0.github.io/posts/2022/02/cpp-stdforward/</link><pubDate>Wed, 16 Feb 2022 14:30:00 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2022/02/cpp-stdforward/</guid><description>问题 一个模板函数f调用另一个函数g时，要将自己的参数转发给g，在转发过程中，有时我们想要保持被转发参数的类型不变，包括是否是const，是左</description></item><item><title>C++值分类</title><link>https://wanghuibin0.github.io/posts/2022/02/cpp-value-category/</link><pubDate>Wed, 16 Feb 2022 12:32:00 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2022/02/cpp-value-category/</guid><description>xvalue代表将亡值。典型的就是std::move形成的值。 参考：Value categories - cppreference.com</description></item><item><title>TeX Family</title><link>https://wanghuibin0.github.io/posts/2021/11/tex-family/</link><pubDate>Wed, 24 Nov 2021 20:44:15 +0800</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2021/11/tex-family/</guid><description>TeX TeX 是 Donald Knuth 编写的一套排版系统，尤其擅长排版复杂的数学公式。TeX 语言定义了一套原语，用于对纯文本进行格式控制；并且在这些原语的基础上，定义了</description></item><item><title>编程语言的形式语义</title><link>https://wanghuibin0.github.io/posts/2021/04/2021-04-21-program-semantics/</link><pubDate>Wed, 21 Apr 2021 13:42:34 +0000</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2021/04/2021-04-21-program-semantics/</guid><description>要让计算机帮你做事情，你一定要把你的想法告诉计算机。怎么告诉呢？靠编程语言。这就好像人和人交流要靠语言（手势表情也算特殊的语言），人和计算机</description></item><item><title>记录一次C++实验</title><link>https://wanghuibin0.github.io/posts/2021/01/2021-01-12-record-a-cpp-experiment/</link><pubDate>Tue, 12 Jan 2021 22:41:33 +0000</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2021/01/2021-01-12-record-a-cpp-experiment/</guid><description>&lt;p>今天有一个猜想：c++函数局部构造的class/struct，如果要返回给父函数，是通过移动语义实现的。
但我并不十分确定，于是做了个实验验证之。&lt;/p></description></item><item><title>C++-programming-language</title><link>https://wanghuibin0.github.io/posts/2021/01/2021-01-12-c-programming-language/</link><pubDate>Tue, 12 Jan 2021 12:53:39 +0000</pubDate><author>作者</author><guid>https://wanghuibin0.github.io/posts/2021/01/2021-01-12-c-programming-language/</guid><description>C++语言设计的两个基本原则 不给比C++更底层的语言留任何余地 零开销抽象</description></item></channel></rss>
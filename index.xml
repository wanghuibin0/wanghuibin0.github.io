<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>子来园</title><link>https://simplecoding.fun/</link><description>子来园</description><generator>Hugo 0.138.0 &amp; FixIt v0.3.14</generator><language>zh-CN</language><managingEditor>fighter9010@gmail.com (lazypanda)</managingEditor><webMaster>fighter9010@gmail.com (lazypanda)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 04 Nov 2024 12:52:03 +0000</lastBuildDate><atom:link href="https://simplecoding.fun/index.xml" rel="self" type="application/rss+xml"/><item><title>LLVM目标无关代码生成器（下）（译）</title><link>https://simplecoding.fun/posts/2024/02/llvm-code-generator-1/</link><pubDate>Tue, 06 Feb 2024 11:46:00 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2024/02/llvm-code-generator-1/</guid><category domain="https://simplecoding.fun/categories/%E6%8A%80%E6%9C%AF/">技术</category><description>&lt;p>&lt;strong>提示&lt;/strong> ： &lt;em>本文翻译了LLVM官方文档中的&lt;a href="https://llvm.org/docs/CodeGenerator.html"target="_blank" rel="external nofollow noopener noreferrer">The LLVM Target-Independent Code Generator&lt;/a>一文，主要为个人学习之用。根据个人的理解，删繁就简，所以有些地方跟原文有所出入，幸勿见怪。如果需要更准确的信息，请参照原文。&lt;/em>&lt;/p>
&lt;h2 id="机器无关代码生成算法" class="heading-element">&lt;span>机器无关代码生成算法&lt;/span>
 &lt;a href="#%e6%9c%ba%e5%99%a8%e6%97%a0%e5%85%b3%e4%bb%a3%e7%a0%81%e7%94%9f%e6%88%90%e7%ae%97%e6%b3%95" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>本节描述代码生成器的各个阶段，描述它们是如何工作的，以及如此设计的背后原理。&lt;/p>
&lt;h3 id="指令选择" class="heading-element">&lt;span>指令选择&lt;/span>
 &lt;a href="#%e6%8c%87%e4%bb%a4%e9%80%89%e6%8b%a9" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>指令选择是将LLVM IR转换为特定机器指令的过程。学术界有多种指令选择算法，而LLVM使用了基于SelectionDAG的指令选择器。&lt;/p>
&lt;p>目前，DAG指令选择器的一部分是由.td文件生成的，另一部分还是需要用C++代码实现。&lt;/p>
&lt;p>GlobalISel是另一个指令选择框架，目前还是实验版本。&lt;/p>
&lt;h4 id="selectiondag简介" class="heading-element">&lt;span>SelectionDAG简介&lt;/span>
 &lt;a href="#selectiondag%e7%ae%80%e4%bb%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>SelectionDAG提供了一种代码表示方式，对于用自动化的指令选择比较友好。另外，对于指令调度也比较友好。而且在这种表示上还可以做一些很低级的机器无关优化。&lt;/p>
&lt;p>SelectionDAG是一种有向无环图，其结点是SDNode实例。SDNode主要包含了操作码和操作数。include/llvm/ISDOpcodes.h文件中描述各种操作节点类型。&lt;/p>
&lt;p>实际中大多结点只是定义一个值，但每个结点都有可能定义多个值。比如，一个div/rem操作同时定义了商和余数。很多其他情形也需要多个值。每个结点还有若干操作数，表示为指向定义这些操作数的结点的边。因为结点可能定义多个值，这些边要表示为SDValue实例，即&amp;lt;SDNode, unsigned&amp;gt;序对，SDNode表示来自哪个结点，unsigned表示来自其哪个结果。SDNode产生的每个值都有关联的MVT (Machine Value Type)，表示该值的类型。&lt;/p>
&lt;p>SelectionDAG包含两种类型的值：表示数据依赖的，表示控制依赖的。数据值就是整数或浮点数类型的边，控制依赖边就是MVT::Other类型的chain边。这些边为有副作用的结点(load/store/call/return)提供了顺序。根据约定，chain输入总是0号操作数，chain输出总是该操作产生的最后一个值。然而，经过指令选择，机器结点也会有在指令操作数后面的chain输入，而且后面可能跟着glue结点。&lt;/p>
&lt;p>SelectionDAG指定有Entry和Root结点，Entry结点是一个标记结点，其操作数总是ISD::EntryToken。Root结点是产生最终结果的结点。&lt;/p>
&lt;p>对于SelectionDAG，一个重要的概念是合法或非法。合法DAG只使用目标机支持的操作和类型。类型合法化和操作合法化负责将非法DAG转换为合法DAG。&lt;/p>
&lt;h4 id="selectiondag指令选择过程" class="heading-element">&lt;span>SelectionDAG指令选择过程&lt;/span>
 &lt;a href="#selectiondag%e6%8c%87%e4%bb%a4%e9%80%89%e6%8b%a9%e8%bf%87%e7%a8%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>包含以下步骤：&lt;/p>
&lt;ol>
&lt;li>构建初始DAG：从LLVM IR到非法DAG做一个简单的转换。&lt;/li>
&lt;li>优化SelectionDAG：在DAG上做一些简单优化，并识别出目标机上支持的元操作，从而使得后面的转换更简单些。&lt;/li>
&lt;li>类型合法化：清除目标机器上不支持的类型。&lt;/li>
&lt;li>优化SelectionDAG：消除类型合法化引入的冗余。&lt;/li>
&lt;li>操作合法化：清除目标机器上不支持的操作。&lt;/li>
&lt;li>优化SelectionDAG：消除操作合法化引入的冗余。&lt;/li>
&lt;li>从DAG上做指令选择：将机器无关的DAG输入转换为目标机指令的DAG。&lt;/li>
&lt;li>SelectionDAG调度和指令序列化：给DAG中的指令指定一个线性顺序，并输出为MachineFunction。这一步使用了传统的调度技术。&lt;/li>
&lt;/ol>
&lt;p>上述步骤完毕后，SelectionDAG被销毁，再运行的其他的代码生成pass。&lt;/p>
&lt;p>为方便查看这些步骤发生的事情，可以利用LLC工具的一些选项。&lt;/p>
&lt;ul>
&lt;li>-view-dag-combine1-dags 显示初构建好的DAG。&lt;/li>
&lt;li>-view-legalize-dags 显示合法化前的DAG。&lt;/li>
&lt;li>-view-dag-combine2-dags 显示在第二步优化前的DAG。&lt;/li>
&lt;li>-view-isel-dags 显示在指令选择前的DAG。&lt;/li>
&lt;li>-view-sched-dags 显示在调度前的DAG。&lt;/li>
&lt;li>-view-sunit-dags 显示调度器的依赖图，该图基于最终SelectionDAG。&lt;/li>
&lt;li>-filter-view-dags 可以选择要查看的基本块的名称，并配合上面几个选项一起使用。&lt;/li>
&lt;/ul>
&lt;h4 id="初始dag构建" class="heading-element">&lt;span>初始DAG构建&lt;/span>
 &lt;a href="#%e5%88%9d%e5%a7%8bdag%e6%9e%84%e5%bb%ba" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>SelectionDAGBuilder类负责从LLVM IR构建SelectionDAG，这个Pass大部分都是硬编码的（LLVM add -&amp;gt; SDNode add, getelementptr -&amp;gt; 显式的算术运算），过程中需要用到机器特定hooks来lower calls, returns, varargs等。&lt;/p>
&lt;h4 id="selectiondag类型合法化" class="heading-element">&lt;span>SelectionDAG类型合法化&lt;/span>
 &lt;a href="#selectiondag%e7%b1%bb%e5%9e%8b%e5%90%88%e6%b3%95%e5%8c%96" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>使DAG只使用目标机支持的类型。&lt;/p>
&lt;p>将不支持的标量类型转化为支持的类型有两种方式：一种叫promoting，将小类型转为大类型，另一种叫expanding，将大整型分解为几个小整型。&lt;/p>
&lt;p>将不支持的vector类型转换为支持的类型也有两种方式：一种是将vector分割，直到找到合法的类型，另一种是通过在末尾添加元素的方式扩展vector，叫expanding。如果一个vector一路到底分割为了单个元素，还没有找到支持的vector类型，那么这些元素就会被转化为标量，叫scalarizing。&lt;/p>
&lt;p>目标机实现通过调用TargetLowering中的addRegisterClass方法来告知合法化器它支持哪些类型，对应的寄存器类是什么。&lt;/p>
&lt;h4 id="selectiondag操作合法化" class="heading-element">&lt;span>SelectionDAG操作合法化&lt;/span>
 &lt;a href="#selectiondag%e6%93%8d%e4%bd%9c%e5%90%88%e6%b3%95%e5%8c%96" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>使DAG只使用目标机支持的操作。&lt;/p>
&lt;p>目标机通常有古怪的约束，比如不支持某些操作。操作合法化通过用一系列操作来模拟某个不支持的操作（expansion）,或者通过将类型提升为更大类型来支持该操作（promotion）,或者通过目标特定的hook来实现合法化（custom）。&lt;/p>
&lt;p>目标机实现通过调用TargetLowering中的setOperationAction方法来告知合法化器它不支持哪些操作，还有采用以上哪种方式来处理这种情况。&lt;/p>
&lt;p>如果目标机有合法的vector类型，肯定希望用这些类型为shufflevector IR指令生成高效机器码，这就需要为shufflevector定制合法化操作。需要处理的形式包括以下几种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>vector select: 就两个输入vector中挑选元素组成新的vector，这也叫做blend或者bitwise select。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Insert subvector：vector要放入从index 0开始的一个更长的vector中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Extract subvector: 从一个长的vector的index 0处拉出子向量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Splat: vector的所有元素都是同样的标量元素。也叫broadcast或者duplicate。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>合法化阶段的引入提供了一种SelectionDAG的标准化形式，并且可以在这种形式上做一些通用优化。&lt;/p>
&lt;h4 id="selectiondag优化阶段dag合并器" class="heading-element">&lt;span>SelectionDAG优化阶段：DAG合并器&lt;/span>
 &lt;a href="#selectiondag%e4%bc%98%e5%8c%96%e9%98%b6%e6%ae%b5dag%e5%90%88%e5%b9%b6%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>在代码生成中，SelectionDAG优化会多次运行，包括DAG刚刚构建好，以及每次合法化pass之后。该pass主要是做一些清理工作。一项重要的工作就是优化插入的符号扩展和零扩展指令。目前是使用ad-hoc技术，未来可能会转为使用更严格的技术。&lt;/p>
&lt;h4 id="selectiondag指令选择阶段" class="heading-element">&lt;span>SelectionDAG指令选择阶段&lt;/span>
 &lt;a href="#selectiondag%e6%8c%87%e4%bb%a4%e9%80%89%e6%8b%a9%e9%98%b6%e6%ae%b5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>这是指令选择过程的与机器有关的主要阶段。该阶段以合法的SelectionDAG为输入，通过模式匹配选择目标机上支持的指令，并输出新的DAG。考虑如下LLVM IR:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-llvm" data-lang="llvm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">%t1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">fadd&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nv">%W&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%X&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">%t2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">fmul&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nv">%t1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%Y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">%t3&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">fadd&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nv">%t2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%Z&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对应的SelectionDAG大致如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(fadd:f32 (fmul:f32 (fadd:f32 W, X), Y), Z)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果目标机支持浮点乘累加操作，那么乘和加就可以合并。在PowerPC上，指令选择器的输出大致如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(FMADDS (FADDS W, X), Y, Z)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>PowerPC的后端会包含以下指令定义：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def FMADDS : AForm_1&amp;lt;59, 29,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (ops F4RC:$FRT, F4RC:$FRA, F4RC:$FRC, F4RC:$FRB),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;fmadds $FRT, $FRA, $FRC, $FRB&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [(set F4RC:$FRT, (fadd (fmul F4RC:$FRA, F4RC:$FRC),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> F4RC:$FRB))]&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def FADDS : AForm_2&amp;lt;59, 21,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (ops F4RC:$FRT, F4RC:$FRA, F4RC:$FRB),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;fadds $FRT, $FRA, $FRB&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [(set F4RC:$FRT, (fadd F4RC:$FRA, F4RC:$FRB))]&amp;gt;;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>TableGen DAG指令选择器从.td文件中读取指令模式，并自动构建模式匹配代码。它具有以下优势：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在编译器自身的编译阶段，可以分析指令模式并告诉你该模式是否有意义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在模式匹配时处理操作数约束。比如，很方便表达&amp;quot;匹配一个13
bit的符号扩展立即数&amp;quot;。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>知悉关于模式一些重要性质。比如，知悉加法符合交换律。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>具有功能齐全的类型推理系统。基本上不需要显式说明模式的每个部分是什么类型的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目标机可以定义它们自己的模式片段。模式片段就是命名并可重用的模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>除了指令，目标机还可以利用Pat类指定可以映射到单个或多个指令模式。比如，PowerPC不具有在一条指令中奖任意整型立即数搬到寄存器的方式，那么就可以在tblgen中做如下定义：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// Arbitrary immediate support. Implement in terms of LIS/ORI.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : Pat&amp;lt;(i32 imm:$imm),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (ORI (LIS (HI16 imm:$imm)), (LO16 imm:$imm))&amp;gt;;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>当使用Pat类将一个模式映射为一条具有单个或多个操作数的指令时，该模式要么用ComplexPattern指定为一个整体，要么分开指定操作数的各个部分。比如，使用后者的PowerPC的后端做了如下定义：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def STWU : DForm_1&amp;lt;37, (outs ptr_rc:$ea_res), (ins GPRC:$rS, memri:$dst),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;stwu $rS, $dst&amp;#34;, LdStStoreUpd, []&amp;gt;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RegConstraint&amp;lt;&amp;#34;$dst.reg = $ea_res&amp;#34;&amp;gt;, NoEncode&amp;lt;&amp;#34;$ea_res&amp;#34;&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : Pat&amp;lt;(pre_store GPRC:$rS, ptr_rc:$ptrreg, iaddroff:$ptroff),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (STWU GPRC:$rS, iaddroff:$ptroff, ptr_rc:$ptrreg)&amp;gt;;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>即便该系统已经很自动化了，仍然需要定制一些C++代码来匹配特殊情形。&lt;/li>
&lt;/ul>
&lt;p>尽管有很多优点，该系统目前也有一些缺陷，主要是由于还有一些未完成的工作：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>没有提供能定义多个值的SelectionDAG结点。这是仍然需要定制C++代码的主要原因。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尚未有支持复杂寻址模式的好的方式。未来将会扩展模式片段使之能够定义多个值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法自动推导类似isStore/isLoad的flag。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法为合法化器自动生成所支持的寄存器和操作集合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>还没有绑定自定义合法化结点的方法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>尽管有这些限制，指令选择器生成器对于大多数的二元操作和逻辑操作指令仍然非常有用。&lt;/p>
&lt;h4 id="selectiondag调度和指令序列化阶段" class="heading-element">&lt;span>SelectionDAG调度和指令序列化阶段&lt;/span>
 &lt;a href="#selectiondag%e8%b0%83%e5%ba%a6%e5%92%8c%e6%8c%87%e4%bb%a4%e5%ba%8f%e5%88%97%e5%8c%96%e9%98%b6%e6%ae%b5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>依据目标机器的各种约束，将机器指令的DAG指派一个顺序。顺序一旦建立，DAG就转换为MachineInstr列表，而后SelectionDAG就销毁了。&lt;/p>
&lt;p>该阶段在逻辑上与指令选择是分开的，但是联系很紧密，因为该阶段的输入正是SelectionDAG。&lt;/p>
&lt;h3 id="基于ssa的机器码优化" class="heading-element">&lt;span>基于SSA的机器码优化&lt;/span>
 &lt;a href="#%e5%9f%ba%e4%ba%8essa%e7%9a%84%e6%9c%ba%e5%99%a8%e7%a0%81%e4%bc%98%e5%8c%96" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>TODO&lt;/p>
&lt;h3 id="活跃区间" class="heading-element">&lt;span>活跃区间&lt;/span>
 &lt;a href="#%e6%b4%bb%e8%b7%83%e5%8c%ba%e9%97%b4" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>活跃区间表示一个变量在哪个范围内是活跃的（live）。某些寄存器分配器会根据该信息确定需要相同物理寄存器的几个虚拟寄存器是否在某些程序点上同时活跃，即它们产生了冲突。如果产生了冲突，就要把某个虚拟寄存器溢出（spill）。&lt;/p>
&lt;h4 id="活跃变量分析" class="heading-element">&lt;span>活跃变量分析&lt;/span>
 &lt;a href="#%e6%b4%bb%e8%b7%83%e5%8f%98%e9%87%8f%e5%88%86%e6%9e%90" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>确定变量活跃区间的第一步就是计算指令执行后立即失效的寄存器集合（即指令计算了值，但后续不再使用），和本条指令中使用但后续不再使用的寄存器集合（即被杀死）。需要对每个虚拟寄存器和可分配的物理寄存器计算活跃变量信息，由于可以使用SSA对虚拟寄存器进行稀疏生命期分析，而且只需要跟踪一个基本块内的物理寄存器，这项任务可以很高效地完成。在寄存器分配之前，LLVM假设物理寄存器只在单个基本块活跃，这就使得通过局部分析就可以解析出物理寄存器的生命期。而如果一个物理寄存器不是可分配的（比如栈指针或条件码），就不需要跟踪它。&lt;/p>
&lt;p>物理寄存器可能以活跃的状态流入或流出一个函数。流入的值常常是寄存器传递的参数，流出的值常常是寄存器传递的返回值。这些值在活跃区间分析中要打上特殊的标记。&lt;/p>
&lt;p>PHI结点需要特殊处理，主要是因为在计算活跃变量信息时，对CFG的DFS遍历无法保证PHI结点使用的虚拟寄存器在使用前定义。当遇到PHI结点时，只处理定义，这是因为其使用会在其他基本块中处理。&lt;/p>
&lt;p>对于当前基本块的每个PHI结点，要在当前基本块末尾模拟一个赋值语句并遍历后继基本块。如果后继基本块有PHI结点，且PHI结点的操作数来自于当前基本块，那么该变量就标记为在当前基本块中以及所有的前驱基本块中都是活跃的，直到碰到定义该变量的那个基本块。&lt;/p>
&lt;h4 id="活跃区间分析" class="heading-element">&lt;span>活跃区间分析&lt;/span>
 &lt;a href="#%e6%b4%bb%e8%b7%83%e5%8c%ba%e9%97%b4%e5%88%86%e6%9e%90" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>现在有了足够的信息来做活跃区间分析。从给基本块和机器指令编号开始，接着处理流入的活跃值，这些值都是在物理寄存器中，所以在基本块末尾可以认为这些寄存器都死亡了。而对于虚拟寄存器，会计算出一个[i,
j)形式的活跃区间，其中i, j都是指令编号。&lt;/p>
&lt;h3 id="寄存器分配" class="heading-element">&lt;span>寄存器分配&lt;/span>
 &lt;a href="#%e5%af%84%e5%ad%98%e5%99%a8%e5%88%86%e9%85%8d" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>寄存器分配问题就是将一个使用无限虚拟寄存器的程序，映射为只使用有限物理寄存器的程序。每个机器架构都有不同数量的物理寄存器，如果物理寄存器不够容纳所有的虚拟寄存器，一些虚拟寄存器就会被映射到内存，这叫spilled
virtuals。&lt;/p>
&lt;h4 id="llvm中寄存器如何表示" class="heading-element">&lt;span>LLVM中寄存器如何表示&lt;/span>
 &lt;a href="#llvm%e4%b8%ad%e5%af%84%e5%ad%98%e5%99%a8%e5%a6%82%e4%bd%95%e8%a1%a8%e7%a4%ba" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>LLVM中物理寄存器用1~1023范围的整数来表示，可以阅读GenRegisterNames.inc文件来查看具体某个架构是怎么编号的，比如查阅lib/Target/X86/X86GenRegisterInfo.inc就可以直到EAX寄存器编号为43，MMX寄存器MM0编号为65。&lt;/p>
&lt;p>一些架构含有物理位置相同的寄存器，如X86架构的EAX, AX, AL共享了前8bit。这些物理寄存器在LLVM中标记为别名。可以查阅RegisterInfo.td文件来检查某个架构的哪些寄存器是别名。而且，MCRegAliasIterator类可以枚举出跟某一个寄存器别名的所有物理寄存器。&lt;/p>
&lt;p>物理寄存器在LLVM中被分组为寄存器类。同一个寄存器类中的寄存器是功能等价的，可以互换使用。每个虚拟寄存器只能被映射到某个寄存器类中的物理寄存器。例如，X86上，一些虚拟寄存器只能分配到8bit寄存器中。寄存器类用TargetRegisterClass对象描述，要想检查一个虚拟寄存器跟物理寄存器是否兼容，可以使用以下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">RegMapping_Fer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">compatible_class&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MachineFunction&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mf&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">v_reg&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">p_reg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TargetRegisterInfo&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">isPhysicalRegister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_reg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Target register must be physical&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">TargetRegisterClass&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">trc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getRegInfo&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">getRegClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v_reg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">trc&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p_reg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有时为了调试需求，需要改变目标机可用的物理寄存器数量。这项任务必须在TargetRegisterInfo.td中静态完成，RegisterClass的最后一个参数就是寄存器列表，如果需要避免使用某些寄存器，就从这里注释掉。&lt;/p>
&lt;p>虚拟寄存器也是用整数表示的。与物理寄存器不同，不同的虚拟寄存器从来不会共享编号。物理寄存器是在TargetRegisterInfo.td中事先定义好的，不能由应用开发者创建，而虚拟寄存器不是这样。为了创建新的虚拟寄存器，可以使用MachineRegisterInfo::createVirtualRegister()方法，它会返回一个新的虚拟寄存器。用IndexedMap&amp;lt;Foo, VirtReg2IndexFunctor&amp;gt;来容纳每个虚拟寄存器的信息。如果需要枚举所有的虚拟寄存器，就使用TargetRegisterInfo::index2VirtReg()方法来找到虚拟寄存器编号：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MRI&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getNumVirtRegs&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="n">VirtReg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TargetRegisterInfo&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">index2VirtReg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stuff&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">VirtReg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在寄存器分配之前，虽然物理寄存器也有使用，不过指令操作数大部分都是虚拟寄存器。为了检查给定的操作数是否是寄存器，可以用MachineOperand::isRegister()方法。为了获得寄存器的整数编号，使用MachineOperand::getReg()。指令可能定义或使用寄存器。比如ADD reg:1026 := reg:1025 reg:1024使用了寄存器1024和1025，而定义了1026。给定寄存器操作数，方法MachineOperand::isUse()返回该寄存器是否被使用，而MachineOperand::isDef()返回该寄存器是否被定义。&lt;/p>
&lt;p>我们将寄存器分配之前存在于LLVM IR中的物理寄存器叫做pre-colored寄存器。这类寄存器用于很多场景，比如，函数调用的参数传递，存储特殊指令的结果。有两类pre-colored寄存器：隐式定义的，显式定义的。后者就是正常的操作数，可以通过MachineInstr::getOperand(int)::getReg()来访问。而要想访问前者，就用TargetInstrInfo::get(opcode)::ImplicitDefs，其中opcode就是该指令的操作码。显式和隐式物理寄存器的重要区别就是后者是每条指令静态定义的，而前者会依赖具体被编译的程序而变化。例如，函数调用总是隐式定义或使用相同的物理寄存器集合。Pre-colored寄存器会给寄存器分配算法施加约束，寄存器分配器必须确保它们在活跃期间都不能被虚拟寄存器中的值所覆盖。&lt;/p>
&lt;h4 id="把虚拟寄存器映射为物理寄存器" class="heading-element">&lt;span>把虚拟寄存器映射为物理寄存器&lt;/span>
 &lt;a href="#%e6%8a%8a%e8%99%9a%e6%8b%9f%e5%af%84%e5%ad%98%e5%99%a8%e6%98%a0%e5%b0%84%e4%b8%ba%e7%89%a9%e7%90%86%e5%af%84%e5%ad%98%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>映射有两种方式：一是直接映射，使用TargetRegisterInfo和MachineOperand类中的方法；二是间接影射，依赖VirtRegMap类来插入load/store指令。&lt;/p>
&lt;p>直接映射给寄存器分配器的开发者提供了更多灵活性，但是，也更容易出错，并且需要更多的实现工作。程序员需要指明在哪里插入laod和store指令。为了将某个物理寄存器指派给某个虚拟寄存器，用MachineOperand::setReg(p_reg)，插入store指令用TargetInstrInfo::storeRegToStackSlot(&amp;hellip;)，插入load指令用TargetInstrInfo::loadRegFromStackSlot。&lt;/p>
&lt;p>间接映射使开发者免于插入load/store指令的复杂性。用VirtRegMap::assignVirt2Phys(vreg,
preg)将虚拟寄存器映射为物理寄存器，用VirtRegMap::assignVirt2StackSlot(vreg)将虚拟寄存器映射到内存，并返回映射的那个stack slot位置。如果需要将另一个虚拟寄存器映射到相同的stack
slot，要用VirtRegMap::assignVirt2StackSlot(vreg, stack_location)。需要注意的一点是，当使用间接映射时，即便虚拟寄存器映射到了内存，仍然需要将它映射到物理寄存器，在对应值store之前，或reload之后，这个物理寄存器就是保存该值的位置。&lt;/p>
&lt;p>如果使用间接映射，在虚拟寄存器映射到物理寄存器或栈槽之后，还需要使用spiller对象防止load/store指令。每个被映射到栈槽的虚拟寄存器在被定义之后都需要store到栈槽中，并在使用之前load回来。spiller的实现会尝试回收利用load/store指令，从而避免冗余。&lt;/p>
&lt;h4 id="处理二地址指令" class="heading-element">&lt;span>处理二地址指令&lt;/span>
 &lt;a href="#%e5%a4%84%e7%90%86%e4%ba%8c%e5%9c%b0%e5%9d%80%e6%8c%87%e4%bb%a4" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>LLVM机器码指令一般都是三地址指令，也就是说，最多定义一个寄存器，使用两个寄存器。但是有些架构使用二地址指令，被定义的寄存器同时也是被使用的寄存器中的一个，例如，X86中的ADD %EAX, %EBX表示%EAX = %EAX + %EBX.。&lt;/p>
&lt;p>为了生成正确代码，LLVM必须将这类指令转化为二地址指令。LLVM提供了TwoAddressInstructionPass
来处理这种情况，且需要在寄存器分配前调用。调用之后生成的代码不再是SSA形式了，比如，%a = ADD %b %c会被转化为如下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">%a = MOVE %b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%a = ADD %a %c&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，在LLVM内部，第二条指令被表示为 ADD %a[def/use] %c。&lt;/p>
&lt;h4 id="ssa销毁过程" class="heading-element">&lt;span>SSA销毁过程&lt;/span>
 &lt;a href="#ssa%e9%94%80%e6%af%81%e8%bf%87%e7%a8%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>在寄存器分配过程中发生的一个重要转换是SSA的销毁。SSA形式简化了CFG上执行的很多分析，但是传统指令集是不实现PHI指令的，因此，为了生成可执行代码，编译器必须将PHI指令替换为等价的其他指令。&lt;/p>
&lt;p>消除PHI指令有多种方式，最传统的一种就是用copy指令替换PHI，这也是LLVM采取的策略。SSA销毁算法实现在lib/CodeGen/PHIElimination.cpp中。为了调用该Pass，需要打上PHIEliminationID标识符作为标记，因为寄存器分配器需要它。&lt;/p>
&lt;h4 id="指令折叠" class="heading-element">&lt;span>指令折叠&lt;/span>
 &lt;a href="#%e6%8c%87%e4%bb%a4%e6%8a%98%e5%8f%a0" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>指令折叠是在寄存器分配期间删除冗余copy指令的优化。比如，以下指令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">%EBX = LOAD %mem_address
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%EAX = COPY %EBX&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以被安全替换为如下单条指令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">%EAX = LOAD %mem_address&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过TargetRegisterInfo::foldMemoryOperand(...)方法可以将指令折叠。不过指令折叠时需要小心，折叠后的指令可能跟原始指令有相当大的差别。&lt;/p>
&lt;h4 id="内置寄存器分配器" class="heading-element">&lt;span>内置寄存器分配器&lt;/span>
 &lt;a href="#%e5%86%85%e7%bd%ae%e5%af%84%e5%ad%98%e5%99%a8%e5%88%86%e9%85%8d%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>LLVM基础设施提供了四种不同的寄存器分配器：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Fast &amp;mdash; 是debug构建中默认使用的分配器。在基本块级别分配寄存器，尽量将值保存在寄存器中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Basic &amp;mdash; 一种增量的寄存器分配方法。通过启发式算法给寄存器指派活跃范围，每次一个。由于分配期间代码可能被改写，该框架允许分配器作为扩展实现。这并不是一个生产级别的分配器，但是在修复bug时很有用，而且可以作为性能基准。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Greedy &amp;mdash; 默认的分配器。在Basic分配器基础上做了高度调优，引入了全局活跃范围分割。该分配器致力于使溢出代码的代价最小化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PBQP &amp;mdash; 基于PBQP的分配器。该分配器将寄存器分配问题建模为PBQP问题，然后使用PBQP求解器解决它，再把答案映射为寄存器的指派方案。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>llc使用的寄存器分配器的类型可以在命令行用-regalloc=&amp;hellip;选项指定：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ llc -regalloc&lt;span class="o">=&lt;/span>linearscan file.bc -o ln.s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ llc -regalloc&lt;span class="o">=&lt;/span>fast file.bc -o fa.s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ llc -regalloc&lt;span class="o">=&lt;/span>pbqp file.bc -o pbqp.s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="prologepilog代码插入" class="heading-element">&lt;span>Prolog/Epilog代码插入&lt;/span>
 &lt;a href="#prologepilog%e4%bb%a3%e7%a0%81%e6%8f%92%e5%85%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>TODO&lt;/p>
&lt;h3 id="compact-unwind" class="heading-element">&lt;span>Compact Unwind&lt;/span>
 &lt;a href="#compact-unwind" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>TODO:&lt;/p>
&lt;h3 id="晚期机器码优化" class="heading-element">&lt;span>晚期机器码优化&lt;/span>
 &lt;a href="#%e6%99%9a%e6%9c%9f%e6%9c%ba%e5%99%a8%e7%a0%81%e4%bc%98%e5%8c%96" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>TODO&lt;/p>
&lt;h3 id="代码输出" class="heading-element">&lt;span>代码输出&lt;/span>
 &lt;a href="#%e4%bb%a3%e7%a0%81%e8%be%93%e5%87%ba" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>代码输出负责将代码生成器中的抽象表示（MachineFunction, MachineInstr等）lower到MC层使用的抽象表示（MCInst, MCStreamer等）。几个不同类合作完成这项任务：机器无关的AsmPrinter类，机器相关的AsmPrinter的子类，以及TargetLoweringObjectFile类。&lt;/p>
&lt;p>MC层属于obj文件的抽象，不再有函数、全局变量等概念。相反，它会考虑标号，directive，指令等概念。此时使用的关键类是MCStreamer，它是可以用多种方式实现（输出.s或.o）的抽象API。MCStreamer针对每个directive有一个方法，比如EmitLabel, EmitSymbolAttribute, switchSection等，这都跟汇编级的directive是对应的。&lt;/p>
&lt;p>如果对为某个机器实现代码生成器感兴趣，那么徐璈实现三件事情：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先，需要继承AsmPrinter。该类将MachineFunction向下转换为MC标号。AsmPrinter基类提供了一系列有用的方法和例程，并允许覆盖其向下转换过程。如果想实现ELF，COFF，或者MachO格式的机器，可以复用很多已实现的代码，因为TargetLoweringObjectFile类已经实现了大部分公共逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其次，需要为你的目标机实现指令打印器。指令打印器以MCInst为输入，将其渲染成文本输出到raw_ostream。这里大部分都可以从.td文件中自动生成，但是仍然需要实现打印操作数的例程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>再次，需要实现从MachineInstr到MCInst的向下转换，常常实现在&amp;lt;target&amp;gt;MCInstLower.cpp文件中。这个向下转换过程经常是目标机相关的，负责将跳转表条目、常量池索引、全局变量地址转换为MCLabels。该转换层负责将代码生成器使用的微操作扩展为对应的实际机器指令，生成的MCInsts会交给指令打印器或者编码器。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>最后，根据你的选择，你也可以为MCCodeEmitter实现一个子类，将MCInst向下转换为机器码字节和重定位。如果你想要支持.o文件输出，或者想实现一个汇编器，这一步就很重要。&lt;/p>
&lt;h4 id="输出函数栈大小信息" class="heading-element">&lt;span>输出函数栈大小信息&lt;/span>
 &lt;a href="#%e8%be%93%e5%87%ba%e5%87%bd%e6%95%b0%e6%a0%88%e5%a4%a7%e5%b0%8f%e4%bf%a1%e6%81%af" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>当TargetLoweringObjectFile::StackSizesSection非空，且设置了TargetOptions::EmitStackSizeSection (-stack-size-section)时，包含函数栈大小元信息的section就会输出。该section包含一个数组，其元素是函数符号值和栈大小组成的有序对。当然栈大小仅包含在函数prologue中申请的栈空间，不包括动态栈申请。&lt;/p>
&lt;h3 id="vliw打包器" class="heading-element">&lt;span>VLIW打包器&lt;/span>
 &lt;a href="#vliw%e6%89%93%e5%8c%85%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>在超长指令字架构上，编译器负责将指令映射到硬件功能单元上。为此，编译器会创建叫做packets或bundles的指令组。LLVM中的VLIW打包器就是完成机器指令打包的机器无关机制。&lt;/p>
&lt;h4 id="从指令映射到功能单元" class="heading-element">&lt;span>从指令映射到功能单元&lt;/span>
 &lt;a href="#%e4%bb%8e%e6%8c%87%e4%bb%a4%e6%98%a0%e5%b0%84%e5%88%b0%e5%8a%9f%e8%83%bd%e5%8d%95%e5%85%83" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>典型的VLIW机器指令会映射到多个功能单元。在打包过程中，编译器必须能够推理出一条指令是否能添加到指令包中。由于编译器需要检查所有可能的映射，这个决策过程可能会很复杂。因此，为了缓解这种复杂性，VLIW打包器会解析目标机的指令类，并在编译器构建期间生成表。可以通过机器无关的API查询这些表，来决定一条指令是否要容纳进一个指令包中。&lt;/p>
&lt;h4 id="打包表如何生成和使用" class="heading-element">&lt;span>打包表如何生成和使用&lt;/span>
 &lt;a href="#%e6%89%93%e5%8c%85%e8%a1%a8%e5%a6%82%e4%bd%95%e7%94%9f%e6%88%90%e5%92%8c%e4%bd%bf%e7%94%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>打包器从目标机的itinerary描述中读取指令类，构建一个DFA来表示指令包的状态。一个DFA包含三个主要元素：输入、状态、转换。DFA的输入集合表示正在被添加到指令包中的指令，状态表示指令所消耗的可能的功能单元。在DFA中，从一个状态到另一个状态的转换发生在给已存在的指令包添加指令时。如果从功能单元到指令的合法映射存在，那么DFA就包含相应的转换。如果转换不存在，就意味着合法的映射不存在，指令不能添加到指令包中。&lt;/p>
&lt;p>为了给VLIW机器生成表，需要在Makefile中将&lt;em>Target&lt;/em>GenDFAPacketizer.inc添加为目标。导出的API提供了三个函数：DFAPacketizer::clearResources(), DFAPacketizer::reserveResources(MachineInstr *MI), 和 DFAPacketizer::canReserveResources(MachineInstr *MI).。这些函数允许打包器将一条指令添加到已存在的指令包中，以及检查指令是否能被添加到指令包中。&lt;/p>
&lt;h2 id="实现独立汇编器" class="heading-element">&lt;span>实现独立汇编器&lt;/span>
 &lt;a href="#%e5%ae%9e%e7%8e%b0%e7%8b%ac%e7%ab%8b%e6%b1%87%e7%bc%96%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>LLVM支持实现完整的独立汇编器。其大部分代码都是从td文件中生成的。&lt;/p>
&lt;h3 id="指令解析" class="heading-element">&lt;span>指令解析&lt;/span>
 &lt;a href="#%e6%8c%87%e4%bb%a4%e8%a7%a3%e6%9e%90" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;h3 id="指令别名处理" class="heading-element">&lt;span>指令别名处理&lt;/span>
 &lt;a href="#%e6%8c%87%e4%bb%a4%e5%88%ab%e5%90%8d%e5%a4%84%e7%90%86" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>指令解析一旦完成，就会进入MatchInstructionImpl函数。该函数做别名处理然后做实际的匹配。&lt;/p>
&lt;p>别名处理是将相同指令的不同文本形式处理为一种标准形式。可能实现的别名有多种，下面按照它们被处理的顺序列出来了。通常情况下，你会想用第一种别名机制来满足实际需要，因为它允许更简洁的描述。&lt;/p>
&lt;h4 id="助记符别名" class="heading-element">&lt;span>助记符别名&lt;/span>
 &lt;a href="#%e5%8a%a9%e8%ae%b0%e7%ac%a6%e5%88%ab%e5%90%8d" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>别名处理的第一步是简单的指令助记符重映射，它就是一种简单的从一种输入助记符到输出助记符的无条件重映射。这种别名不会去看操作数，所以这种重映射必须对给定的助记符的所有形式都适用。助记符别名的定义是很简单的，比如X86如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def : MnemonicAlias&amp;lt;&amp;#34;cbw&amp;#34;, &amp;#34;cbtw&amp;#34;&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : MnemonicAlias&amp;lt;&amp;#34;smovq&amp;#34;, &amp;#34;movsq&amp;#34;&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : MnemonicAlias&amp;lt;&amp;#34;fldcww&amp;#34;, &amp;#34;fldcw&amp;#34;&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : MnemonicAlias&amp;lt;&amp;#34;fucompi&amp;#34;, &amp;#34;fucomip&amp;#34;&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : MnemonicAlias&amp;lt;&amp;#34;ud2a&amp;#34;, &amp;#34;ud2&amp;#34;&amp;gt;;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有了这类定义，助记符就可以简单直接地重映射。虽然助记符别名不会看指令内部信息，但是它们会通过Requires子句依赖于全局模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def : MnemonicAlias&amp;lt;&amp;#34;pushf&amp;#34;, &amp;#34;pushfq&amp;#34;&amp;gt;, Requires&amp;lt;[In64BitMode]&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : MnemonicAlias&amp;lt;&amp;#34;pushf&amp;#34;, &amp;#34;pushfl&amp;#34;&amp;gt;, Requires&amp;lt;[In32BitMode]&amp;gt;;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该例子中，根据当前指令集，助记符被映射到不同的指令。&lt;/p>
&lt;h4 id="指令别名" class="heading-element">&lt;span>指令别名&lt;/span>
 &lt;a href="#%e6%8c%87%e4%bb%a4%e5%88%ab%e5%90%8d" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>别名处理的最一般步骤发生在匹配时：它提供了匹配器的新形式来匹配特定的指令生成。指令别名有两部分：要匹配的字符串和要生成的指令。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;movsx $src, $dst&amp;#34;, (MOVSX16rr8W GR16:$dst, GR8 :$src)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;movsx $src, $dst&amp;#34;, (MOVSX16rm8W GR16:$dst, i8mem:$src)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;movsx $src, $dst&amp;#34;, (MOVSX32rr8 GR32:$dst, GR8 :$src)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;movsx $src, $dst&amp;#34;, (MOVSX32rr16 GR32:$dst, GR16 :$src)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;movsx $src, $dst&amp;#34;, (MOVSX64rr8 GR64:$dst, GR8 :$src)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;movsx $src, $dst&amp;#34;, (MOVSX64rr16 GR64:$dst, GR16 :$src)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;movsx $src, $dst&amp;#34;, (MOVSX64rr32 GR64:$dst, GR32 :$src)&amp;gt;;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这展示了一个强大的指令别名例子，根据汇编中存在哪些操作数，以多种不同的方式匹配相同的助记符。指令别名的结果可以包含以不同于目标指令的顺序排列的操作数,并且可以多次使用同一个输入，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;clrb $reg&amp;#34;, (XOR8rr GR8 :$reg, GR8 :$reg)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;clrw $reg&amp;#34;, (XOR16rr GR16:$reg, GR16:$reg)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;clrl $reg&amp;#34;, (XOR32rr GR32:$reg, GR32:$reg)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;clrq $reg&amp;#34;, (XOR64rr GR64:$reg, GR64:$reg)&amp;gt;;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子也展示了绑定的操作数只列出一次。在X86后端,XOR8rr有两个输入GR8和一个输出GR8(其中一个输入与输出绑定)。InstAliases 获取一个简化的不重复的操作数列表，指令别名的结果也可以使用立即数和固定的物理寄存器,它们在结果中会被添加为简单的立即数操作数，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// Fixed Immediate operand.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;aad&amp;#34;, (AAD8i8 10)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// Fixed register operand.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;fcomi&amp;#34;, (COM_FIr ST1)&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// Simple alias.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def : InstAlias&amp;lt;&amp;#34;fcomi $reg&amp;#34;, (COM_FIr RST:$reg)&amp;gt;;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>指令别名也可以使用Requires子句来使它们特定于具体的子目标机器。&lt;/p>
&lt;p>如果后端支持，指令打印器还可以自动输出别名，而不是被别名的指令。通常这会导致代码更好更易读。如果确实需要被别名的指令，就在InstAlias定义时将0传入作为第三个参数。&lt;/p>
&lt;h3 id="指令匹配" class="heading-element">&lt;span>指令匹配&lt;/span>
 &lt;a href="#%e6%8c%87%e4%bb%a4%e5%8c%b9%e9%85%8d" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>TODO&lt;/p></description></item><item><title>LLVM目标无关代码生成器（上）（译）</title><link>https://simplecoding.fun/posts/2024/02/llvm-code-generator-0/</link><pubDate>Mon, 05 Feb 2024 17:02:00 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2024/02/llvm-code-generator-0/</guid><category domain="https://simplecoding.fun/categories/%E6%8A%80%E6%9C%AF/">技术</category><description>&lt;p>&lt;strong>提示&lt;/strong>：&lt;em>本文翻译了LLVM官方文档中的&lt;a href="https://llvm.org/docs/CodeGenerator.html"target="_blank" rel="external nofollow noopener noreferrer">The LLVM Target-Independent Code Generator&lt;/a>一文，主要为个人学习之用。根据个人的理解，删繁就简，所以有些地方跟原文有所出入，幸勿见怪。如果需要更准确的信息，请参照原文。&lt;/em>&lt;/p>
&lt;h2 id="简介" class="heading-element">&lt;span>简介&lt;/span>
 &lt;a href="#%e7%ae%80%e4%bb%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>LLVM的代码生成器是一个框架，提供了一系列可重用组件，将LLVM IR翻译为特定目标机器的汇编指令。包含以下六个组件：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>抽象目标机描述接口：关于目标机器的重要属性（不包括这些属性是如何使用的）。位于include/llvm/Target。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用于表示目标机器代码的类：使之足够抽象以便能表达任意目标机的机器代码。位于include/llvm/CodeGen。例如，可以表达&amp;quot;常量池条目&amp;quot;和&amp;quot;跳转表&amp;quot;的概念。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用于在目标文件（MC层）表示代码的类和算法：可以表达汇编级的概念如：label, section, instruction. 而&amp;quot;常量池条目&amp;quot;和&amp;quot;跳转表&amp;quot;的概念不在这层表达。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目标无关算法。用于实现不同阶段的本地代码生成，如：寄存器分配、指令调度、栈帧表示。位于lib/CodeGen&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对应于抽象机器描述接口的特定机器实现。这些机器描述利用LLVM提供的组件，以及为特定目标机定制的pass，为特定机器构件一个完整的目标生成器。位于lib/Target。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>目标无关的JIT组件。该组件本身是目标无关的，但它会利用TargetJITInfo接口来处理目标相关的问题。位于lib/ExecutionEngine/JIT。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>后端开发人员需要熟悉目标机描述以及机器代码表示相关的类。若要为新机器添加后端，需要为该机器实现抽象机器描述接口，并理解LLVM IR。若要实现新的代码生成算法，为了其可移植性，必须只依靠来目标机描述和机器代码表示来做。&lt;/p>
&lt;h3 id="代码生成器中的必需组件" class="heading-element">&lt;span>代码生成器中的必需组件&lt;/span>
 &lt;a href="#%e4%bb%a3%e7%a0%81%e7%94%9f%e6%88%90%e5%99%a8%e4%b8%ad%e7%9a%84%e5%bf%85%e9%9c%80%e7%bb%84%e4%bb%b6" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>要在LLVM框架中增加后端，需要实现的必不可少的接口只有两个：TargetMachine, DataLayout。&lt;/p>
&lt;p>这意味着：一方面LLVM能够支持非传统的目标机，比如以C语言为后端，就不需要寄存器分配、指令选择等阶段；另一方面可以设计实现出完全不同的不需要用LLVM内置组件的代码生成器，比如针对FPGA。&lt;/p>
&lt;h3 id="代码生成器的高层设计" class="heading-element">&lt;span>代码生成器的高层设计&lt;/span>
 &lt;a href="#%e4%bb%a3%e7%a0%81%e7%94%9f%e6%88%90%e5%99%a8%e7%9a%84%e9%ab%98%e5%b1%82%e8%ae%be%e8%ae%a1" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>设计代码生成器是为了支持寄存器微处理器的高效高质量代码生成。代码生成包含以下阶段：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>指令选择：将LLVM IR转换为目标指令DAG。该DAG使用SSA形式的虚拟寄存器，以及与目标约束或调用约定相关的特定物理寄存器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调度和生成序列化指令：以SelectionDAG为输入，决定指令顺序，并输出MachineInstr机器指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于SSA的机器代码优化：比如modulo-scheduling和窥孔优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器分配：将无限的虚拟寄存器映射到具体的物理寄存器，在必要时生成spill code。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插入prolog/epilog：一旦机器码生成完毕，栈空间需求量确定，就可以插入prolog/epilog。帧指针消除和stack packing也是在这阶段做的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>晚期机器码优化：比如spill code scheduling和窥孔优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码输出：可以是汇编格式或二进制格式。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>指令选择是基于最优化的模式匹配选择器做的。&lt;/p>
&lt;p>具体后端的实现可以在这些阶段中任意插入自己特定的Pass。&lt;/p>
&lt;h3 id="用tablegen描述目标机器" class="heading-element">&lt;span>用TableGen描述目标机器&lt;/span>
 &lt;a href="#%e7%94%a8tablegen%e6%8f%8f%e8%bf%b0%e7%9b%ae%e6%a0%87%e6%9c%ba%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>机器描述类需要关于目标架构的详细描述。为了提取出关于机器描述的公共部分，LLVM使用TableGen语言来描述目标机器，来减少重复。&lt;/p>
&lt;p>随着LLVM继续发展，会将越来越多机器描述移到td文件中。这样可以使移植后端更容易。&lt;/p>
&lt;h2 id="目标机描述类includellvmtarget" class="heading-element">&lt;span>目标机描述类（include/llvm/Target）&lt;/span>
 &lt;a href="#%e7%9b%ae%e6%a0%87%e6%9c%ba%e6%8f%8f%e8%bf%b0%e7%b1%bbincludellvmtarget" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>提供了目标机器的抽象描述。例如：指令、寄存器&lt;/p>
&lt;p>所有的机器描述类（除了DataLayout）都是要被具体机器的实现继承的。TargetMachine类提供了需要被目标机实现的访问器。&lt;/p>
&lt;h3 id="targetmachine类" class="heading-element">&lt;span>TargetMachine类&lt;/span>
 &lt;a href="#targetmachine%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>提供了用于访问不同机器描述类的虚函数（getInstrInfo, getRegisterInfo, getFrameInfo）。具体机器（X86TargetMachine）实现这些虚函数。&lt;/p>
&lt;h3 id="datalayout类" class="heading-element">&lt;span>DataLayout类&lt;/span>
 &lt;a href="#datalayout%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>该类是唯一必需的机器描述类，且不可被继承。该类用来说明目标机针对不同数据类型的内存布局、对齐要求、指针size、大小端等信息。&lt;/p>
&lt;h3 id="targetlowering类" class="heading-element">&lt;span>TargetLowering类&lt;/span>
 &lt;a href="#targetlowering%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>给指令选择使用，主要用于描述LLVM IR代码是如何lower到SelectionDAG。此外还用来指定：&lt;/p>
&lt;ol>
&lt;li>针对不同数据类型的register class&lt;/li>
&lt;li>目标机器支持的操作&lt;/li>
&lt;li>setcc操作的返回类型&lt;/li>
&lt;li>用于表示Shfit amount的类型&lt;/li>
&lt;li>一些高层特性，如将常量除法替换为乘法序列是否有收益&lt;/li>
&lt;/ol>
&lt;h3 id="targetregisterinfo类" class="heading-element">&lt;span>TargetRegisterInfo类&lt;/span>
 &lt;a href="#targetregisterinfo%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>该类描述目标机的寄存器集合以及这些寄存器之间的相互作用。&lt;/p>
&lt;p>寄存器是用无符号整数表示的。需注意寄存器0保留为flag值。&lt;/p>
&lt;p>处理器描述中的每个寄存器都有一个关联的TargetRegisterDesc条目，该条目提供了寄存器的文本名字以及一系列别名。&lt;/p>
&lt;p>TargetRegisterInfo类还暴露了处理器特定的寄存器类，每个寄存器类都有相同属性。指令选择器创建的每个SSA虚拟寄存器都有一个关联的寄存器类。寄存器分配时，虚拟寄存器被相关联的寄存器类中的一个物理寄存器所替代。这些寄存器类都是通过TableGen自动生成的。&lt;/p>
&lt;h3 id="targetinstrinfo类" class="heading-element">&lt;span>TargetInstrInfo类&lt;/span>
 &lt;a href="#targetinstrinfo%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>该类描述目标机支持的指令。定义了opcode对应的助记符、操作数数量、隐式使用和定义的寄存器、是否具有一些机器无关的属性（访问内存、满足交换律等）和机器相关的flag。&lt;/p>
&lt;h3 id="targetframelowering类" class="heading-element">&lt;span>TargetFrameLowering类&lt;/span>
 &lt;a href="#targetframelowering%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>提供关于目标机器堆栈布局的信息。包含堆栈的增长方向，每个函数的堆栈对齐要求，局部变量区域的偏移位置。&lt;/p>
&lt;h3 id="targetsubtarget类" class="heading-element">&lt;span>TargetSubtarget类&lt;/span>
 &lt;a href="#targetsubtarget%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>提供目标机器的特定子芯片的信息。包括该子芯片支持的指令、指令延迟、指令指令itinerary（使用的的处理单元、顺序以及时长）。&lt;/p>
&lt;h3 id="targetjitinfo类" class="heading-element">&lt;span>TargetJITInfo类&lt;/span>
 &lt;a href="#targetjitinfo%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>定义了给JIT代码生成器的抽象接口，来处理机器相关的活动，如发射stub。&lt;/p>
&lt;h2 id="机器码描述类" class="heading-element">&lt;span>机器码描述类&lt;/span>
 &lt;a href="#%e6%9c%ba%e5%99%a8%e7%a0%81%e6%8f%8f%e8%bf%b0%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>llvm使用MachineFunction, MachineBasicBlock, MachineInstr (include/llvm/CodeGen)
几个类来表示机器码，这几个类本身是机器无关的，将代码表示成抽象形式的指令：一个操作码加几个操作数。这种表示既支持SSA形式，也支持寄存器分配后的非SSA形式。&lt;/p>
&lt;h3 id="machineinstr类" class="heading-element">&lt;span>MachineInstr类&lt;/span>
 &lt;a href="#machineinstr%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>将机器指令表示为MachineInstr的实例。MachineInstr表达指令的方式相当抽象，只记录操作码和一系列操作数。&lt;/p>
&lt;p>操作码就是一个简单的无符号整数。目标机的所有指令都应该定义在InstrInfo.td中。操作码的枚举值就是从这些定义中生成的。MachineInstr类并不包含对应指令的语义信息（这些信息在TargetInstrInfo类中）。&lt;/p>
&lt;p>操作数可以有几种类型：寄存器引用、常量整数、基本块引用等。另外，还需要将操作数标记为def或use。根据约定，操作数中寄存器def必须出现在use之前（不管最终的汇编码是否如此）。&lt;/p>
&lt;h4 id="使用machineinstrbuilderh中的函数" class="heading-element">&lt;span>使用MachineInstrBuilder.h中的函数&lt;/span>
 &lt;a href="#%e4%bd%bf%e7%94%a8machineinstrbuilderh%e4%b8%ad%e7%9a%84%e5%87%bd%e6%95%b0" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>可以使用BuildMI (include/llvm/CodeGen/MachineInstrBuilder.h)来创建机器指令。用法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create a &amp;#39;DestReg = mov 42&amp;#39; (rendered in X86 assembly as &amp;#39;mov DestReg, 42&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// instruction and insert it at the end of the given MachineBasicBlock.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">TargetInstrInfo&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">TII&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MachineBasicBlock&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">MBB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">DebugLoc&lt;/span> &lt;span class="n">DL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MachineInstr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">MI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BuildMI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TII&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X86&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MOV32ri&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">DestReg&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">addImm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create the same instr, but insert it before a specified iterator point.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MachineBasicBlock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator&lt;/span> &lt;span class="n">MBBI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">BuildMI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MBBI&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TII&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X86&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">MOV32ri&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">DestReg&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">addImm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create a &amp;#39;cmp Reg, 0&amp;#39; instruction, no destination reg.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BuildMI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TII&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X86&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">CMP32ri8&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="n">addReg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Reg&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">addImm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create an &amp;#39;sahf&amp;#39; instruction which takes no operands and stores nothing.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">MI&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BuildMI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TII&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X86&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">SAHF&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create a self looping branch instruction.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">BuildMI&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MBB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">DL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TII&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X86&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">JNE&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="n">addMBB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">MBB&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>若要增加额外的def操作数，必须要显式标记出来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">MI&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addReg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Reg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RegState&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Define&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="固定用途寄存器" class="heading-element">&lt;span>固定用途寄存器&lt;/span>
 &lt;a href="#%e5%9b%ba%e5%ae%9a%e7%94%a8%e9%80%94%e5%af%84%e5%ad%98%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>代码生成器需要知道哪些寄存器是有固定用途的。指令流里面常常需要把特殊值安排在特殊寄存器中，比如由于指令集的限制，X86需要用EAX/EDX来做32位除法，再比如调用约定产生的特殊约束。在这些情况下，指令选择器会生成代码将虚拟寄存器拷入或拷出到物理寄存器。比如以下LLVM代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-llvm" data-lang="llvm">&lt;span class="line">&lt;span class="cl">&lt;span class="k">define&lt;/span> &lt;span class="k">i32&lt;/span> &lt;span class="vg">@test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">i32&lt;/span> &lt;span class="nv">%X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">i32&lt;/span> &lt;span class="nv">%Y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">%Z&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">sdiv&lt;/span> &lt;span class="k">i32&lt;/span> &lt;span class="nv">%X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%Y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">ret&lt;/span> &lt;span class="k">i32&lt;/span> &lt;span class="nv">%Z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>会被转换为如下的机器码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">;; Start of div
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%EAX = mov %reg1024 ;; Copy X (in reg1024) into EAX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%reg1027 = sar %reg1024, 31
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%EDX = mov %reg1027 ;; Sign extend X into EDX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idiv %reg1025 ;; Divide by Y (in reg1025)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%reg1026 = mov %EAX ;; Read the result (Z) out of EAX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; Start of ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%EAX = mov %reg1026 ;; 32-bit return value goes in EAX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ret&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过在最后，寄存器分配器会将冗余的寄存器拷贝操作删除，生成如下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">;; X is in EAX, Y is in ECX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mov %EAX, %EDX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sar %EDX, 31
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idiv %ECX
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ret&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种方法对任何目标机都适用。需要注意的是，为了高质量的代码生成，物理寄存器的生命周期要短，而且所有的物理寄存器在进入基本块和离开基本块时是dead的（在寄存器分配之前如此）。因此，如果需要一个值的活跃期跨越基本块，必须活跃于虚拟寄存器中。&lt;/p>
&lt;h4 id="函数调用会破坏的寄存器" class="heading-element">&lt;span>函数调用会破坏的寄存器&lt;/span>
 &lt;a href="#%e5%87%bd%e6%95%b0%e8%b0%83%e7%94%a8%e4%bc%9a%e7%a0%b4%e5%9d%8f%e7%9a%84%e5%af%84%e5%ad%98%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>一些机器指令会破坏大量的物理寄存器，，比如函数调用。这时就需要用MO_RegisterMask来将它们标记出来，MO_RegisterMask能够标记出哪些寄存器是在函数调用中被保护的，而除此之外的其他寄存器就默认是被破坏了。&lt;/p>
&lt;h4 id="ssa形式的机器码" class="heading-element">&lt;span>SSA形式的机器码&lt;/span>
 &lt;a href="#ssa%e5%bd%a2%e5%bc%8f%e7%9a%84%e6%9c%ba%e5%99%a8%e7%a0%81" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h4>&lt;p>MachineInstr在寄存器分配之前都保持着SSA形式。LLVM PHI结点变成了机器码PHI结点，而虚拟寄存器只允许有一个def。在寄存器分配之后，代码中就不存在虚拟寄存器了，机器码也不再是SSA形式了。&lt;/p>
&lt;h3 id="machinebasicblock类" class="heading-element">&lt;span>MachineBasicBlock类&lt;/span>
 &lt;a href="#machinebasicblock%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>包含一个机器指令(MachineInstr)列表。大致跟LLVM IR中的基本块是对应的，不过也有可能一个LLVM
IR基本块对应多个MachineBasicBlock。其中有一个getBasicBLock方法，可以返回对应的LLVM IR基本块。&lt;/p>
&lt;h3 id="machinefunction类" class="heading-element">&lt;span>MachineFunction类&lt;/span>
 &lt;a href="#machinefunction%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>包含一个MachineBasicBlock列表。跟LLVM IR中的函数是对应的。除了MachineBasicBlock列表之外，每个MachineFunction还包含一个MachineConstantPool, 一个MachineFrameInfo, 一个MachineFunctionInfo, 一个MachineRegisterInfo。&lt;/p>
&lt;h3 id="machineinstr指令包" class="heading-element">&lt;span>MachineInstr指令包&lt;/span>
 &lt;a href="#machineinstr%e6%8c%87%e4%bb%a4%e5%8c%85" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>可以将一个指令序列视为MachineInstr指令包。这种指令包可以建模包含任意数量并行指令的VLIW指令，也可以建模无法分割的一个执行序列，如ARM Thumb2 IT block。&lt;/p>
&lt;p>在概念上，一个MI指令包就是一个MI内部嵌套了几个其他MI。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">--------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| Bundle | ---------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------- \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | MI |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | MI |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | MI |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| Bundle | --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------- \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | MI |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | MI |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ----------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| Bundle | --------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------- \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>内部的MI会打上InsideBundle标志。具有特殊BUNDLE操作码的顶层MI用来表示指令包的开头。&lt;/p>
&lt;p>关于MachineInstr的Pass是将MI指令包作为基本单元来操作的。MachineBasicBlock的迭代器就是如此。正因如此，MachineBasicBlock还提供了另外一个迭代器instr_iterator，可以遍历基本块的所有MI指令。顶层BUNDLE指令必须具有正确的寄存器 MachineOperand 集合,这些寄存器表示捆绑指令(bundled MIs)的累积输入和输出。&lt;/p>
&lt;p>对于VLIW架构，MachineInstr的打包是寄存器分配的一部分。具体说，决定哪些指令打包在一起的pass应该在代码从SSA形式退出之后做，需要在虚拟寄存器改写为物理寄存器之后完成。这就不再需要将虚拟寄存器操作数添加到BUNDLE指令中。&lt;/p>
&lt;h2 id="mc层" class="heading-element">&lt;span>MC层&lt;/span>
 &lt;a href="#mc%e5%b1%82" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>MC层用来表示和处理原始机器码级别的代码，已经不再存在诸如常量池、跳转表、全局变量等高层次的概念。在MC层，LLVM处理诸如label名称，机器指令，目标文件中section等。这层的代码有几个重要目的：代码生成器用它生成.s或.o文件，llvm-mc工具用它实现独立的机器码汇编器和反汇编器。&lt;/p>
&lt;p>以下讲述几个重要的相关类：&lt;/p>
&lt;h3 id="mcstreamer-api" class="heading-element">&lt;span>MCStreamer API&lt;/span>
 &lt;a href="#mcstreamer-api" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>最好将MCStreamer看做是汇编器API，它是抽象的，可以用不同方式实现，比如生成.s、生成.o就是不同的方式。MCStreamer对于每种directive都有一个方法，比如EmitLable, EmitSymbolAttribute, switchSection,
emitValue等，这些都对应着汇编级别的概念。还有一个EmitInstruction方法，用来输出MCInst。&lt;/p>
&lt;p>这套API有两个重要的客户：llvm-mc独立汇编器和代码生成器的代码发射阶段。&lt;/p>
&lt;p>MCStreamer有两个主要的实现：一个用来输出.s文件，另一个用来输出.o文件。输出.o文件的MCObjectStreamer实现了一个完整的汇编器。&lt;/p>
&lt;p>对于目标机器特定的directive，MCStreamer有一个MCTargetStreamer实例，一个目标机如果需要实现特定的directive，那么就需要从该类继承。这个自定义的子类需要对每个directive定义一个方法，同时还需要定义两个子类，分别生成asm和obj。&lt;/p>
&lt;p>目标机的初始化代码还需要调用TargetRegistry::RegisterAsmStreamer和TargetRegistry::RegisterMCObjectStreamer将对应的streamer进行注册。&lt;/p>
&lt;h3 id="mccontext类" class="heading-element">&lt;span>MCContext类&lt;/span>
 &lt;a href="#mccontext%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>该类是MC层各种数据结构的所有者，包括symbols, sections等。若要创建symbol和section，就要与该类交互。该类不可被继承。&lt;/p>
&lt;h3 id="mcsymbol类" class="heading-element">&lt;span>MCSymbol类&lt;/span>
 &lt;a href="#mcsymbol%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>该类代表汇编文件中的一个symbol (aka label)。symbol有两种：汇编器临时symbol、正常symbol。汇编器临时symbol是被汇编器使用并处理的，并在生成obj文件时被丢弃。常见的做法是在label名前加前缀以示区别。&lt;/p>
&lt;p>MCSymbol是被MCContext创建的，并保证唯一性。这意味着两个MCSymbol可以通过比较指针是否相等来判断同一性。但是指针不相等却不能保证它们最终映射到不同的地址。如下的输出在.s文件中是合法的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">foo:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bar:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .byte 4&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种情况下，foo和bar具有相同的地址。&lt;/p>
&lt;h3 id="mcsection类" class="heading-element">&lt;span>MCSection类&lt;/span>
 &lt;a href="#mcsection%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>该类代表一个obj文件的section。可以被继承以实现各种不同格式的obj文件，如ELF。它是被MCContext创建的并保证唯一性。MCStreamer中有当前section的概念，可以通过SwitchToSection来改变当前section（这个概念与.s文件中的.section directive相当）。&lt;/p>
&lt;h3 id="mcinst类" class="heading-element">&lt;span>MCInst类&lt;/span>
 &lt;a href="#mcinst%e7%b1%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>该类是一条指令的机器无关表示。这是一个很简单的类（相对于MachineInstr来说），只包含了特定机器的操作码和一系列MCOperands。而MCOperand只是一个包含了三种情况的union：1) 简单立即数 2）寄存器ID 3) 符号表达式MCExpr（如Lfoo-Lbar+42）&lt;/p>
&lt;h3 id="目标文件格式" class="heading-element">&lt;span>目标文件格式&lt;/span>
 &lt;a href="#%e7%9b%ae%e6%a0%87%e6%96%87%e4%bb%b6%e6%a0%bc%e5%bc%8f" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;p>MC层的obj文件输出器支持多种obj格式。实际上每个目标机支持的格式仅仅是MC层提供的子集。大部分机器支持ELF格式，而其他机器可能还有它们自己定义的格式。&lt;/p></description></item><item><title>笔记-LLVM IR中的undef和poison</title><link>https://simplecoding.fun/posts/2024/02/llvm-undef-poison/</link><pubDate>Thu, 01 Feb 2024 16:06:00 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2024/02/llvm-undef-poison/</guid><category domain="https://simplecoding.fun/categories/%E6%8A%80%E6%9C%AF/">技术</category><description>&lt;p>LLVM IR中有两个特殊的关键字：undef和poison，它们分别代表两种特殊的常量，是常见的编程语言中没有的概念。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>undef用来表示该常量有可能取任意值，这有利于编译器做优化，因为编译器可以用任意值来替代undef。&lt;/p>
&lt;p>需要注意的是，undef的取值可以在其活跃范围内随时变化，这会带来一些违反直觉的结果。比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-llvm" data-lang="llvm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">%A&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">undef&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">%B&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">xor&lt;/span> &lt;span class="nv">%A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%A&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与之等价的是 &lt;code>%B = undef&lt;/code> ，而不是直观上的 &lt;code>%B = 0&lt;/code> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>poison用来表示错误操作的结果。&lt;/p>
&lt;p>典型的例子是，带有nsw/nuw flag的add指令，如果结果溢出，就会产生poison结果。&lt;/p>
&lt;p>对于大多数指令（除了select），如果有一个操作数是poison，那么其结果也是poison。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>与undef和poison密切相关的一条指令是freeze，它是用来停止undef/poison的传播的。&lt;/p>
&lt;p>如果其操作数是undef/poison，那么其结果就变成了固定值（具体是多少是任意取的）；如果是其他操作数，则相当于一条nop。比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-llvm" data-lang="llvm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">%A&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">undef&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">%B&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="err">freeze&lt;/span> &lt;span class="nv">%A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">%C&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">xor&lt;/span> &lt;span class="nv">%B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">%B&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码的执行结果会是： &lt;code>%C = 0&lt;/code> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从语义角度看，poison是比undef更「强」的概念。&lt;/p>
&lt;p>在能使用poison的地方，用undef来替代是安全的，反之则不然。&lt;/p>
&lt;p>而从有利于优化的角度来看，应该尽可能使用poison，因为这相当于让编译器看到了更「具体」的信息，可以做更激进的优化。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="refs" class="heading-element">&lt;span>refs&lt;/span>
 &lt;a href="#refs" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>&lt;a href="https://llvm.org/docs/LangRef.html#undefined-values"target="_blank" rel="external nofollow noopener noreferrer">https://llvm.org/docs/LangRef.html#undefined-values&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>读《沟通的艺术》</title><link>https://simplecoding.fun/posts/2024/01/reading-art-of-communication/</link><pubDate>Tue, 30 Jan 2024 10:25:00 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2024/01/reading-art-of-communication/</guid><category domain="https://simplecoding.fun/categories/%E8%AF%BB%E4%B9%A6/">读书</category><description>&lt;p>人是社会性动物，要在这个社会上生存，显然无法避开人际关系这个课题。而要创造良好的人际关系，就必须学会沟通。
不管是日常生活中的交朋友、谈恋爱，还是工作中的合作共赢，抑或是读书写作，只要需要与人打交道，就需要沟通。
可以说，沟通涉及到生活的方方面面，沟通能力的高低，直接或间接影响着我们的生活质量和幸福感，其重要性不言而喻。&lt;/p>
&lt;p>《&lt;a href="https://book.douban.com/subject/27117578/"target="_blank" rel="external nofollow noopener noreferrer">沟通的艺术&lt;/a>》是一本专门讨论「沟通」的心理学书籍，它被多次再版（目前最新版是第15版），足见其受到的认可程度。
沟通能力，尽管受到许多先天因素的影响，但是其中仍然有不少技巧是可以通过学习而掌握的。如果你想提高沟通能力，不妨看看这本书。&lt;/p>
&lt;h2 id="为什么要沟通" class="heading-element">&lt;span>为什么要沟通&lt;/span>
 &lt;a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e6%b2%9f%e9%80%9a" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>该书第一章对「为什么要沟通」有更详尽的描述，从更科学的角度说明了沟通的重要性。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>生理需求&lt;/p>
&lt;p>沟通质量会直接影响我们的身体健康。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>认同需求&lt;/p>
&lt;p>我们在人际沟通中认识自己，知道「我是谁」。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>社交需求&lt;/p>
&lt;p>积极的关系是我们生活满足感和情绪幸福感的重要来源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实际目标&lt;/p>
&lt;p>沟通是我们完成具体任务（如工作）所需要的，良好的沟通能够使我们更有效率达到目标。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>马斯洛把人的需求划分为五个层次：生理需求、安全需求、社交需求、自尊需求、自我实现需求。显然，沟通能力对于实现各个层次的需求都是必要的。&lt;/p>
&lt;h2 id="沟通高手是什么样的" class="heading-element">&lt;span>沟通高手是什么样的&lt;/span>
 &lt;a href="#%e6%b2%9f%e9%80%9a%e9%ab%98%e6%89%8b%e6%98%af%e4%bb%80%e4%b9%88%e6%a0%b7%e7%9a%84" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>要想成为沟通高手，首先要看看沟通高手有哪些突出的特质，以便在我们自己练习时明确努力的方向。&lt;/p>
&lt;p>以下列举了沟通高手具有的一些特质，以及对于每项特质的提高，我们需要在哪些方向上努力。我们可以反省一下自己在这些方面是否有不足，然后针对自己的不足，在实践中刻意练习。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>拥有多样化的行为资料库&lt;/p>
&lt;p>用心观察，归纳总结&lt;/p>
&lt;/li>
&lt;li>
&lt;p>挑选恰当行为的能力&lt;/p>
&lt;p>考虑三个因素：当时的具体情境/自己的目的/对对方的认知&lt;/p>
&lt;/li>
&lt;li>
&lt;p>表现行为的技巧&lt;/p>
&lt;p>刻意练习，孰能生巧&lt;/p>
&lt;/li>
&lt;li>
&lt;p>认知复杂度&lt;/p>
&lt;ul>
&lt;li>
&lt;p>知觉核验&lt;/p>
&lt;p>描述对方的行为，列出关于此行为的至少两种可能的诠释，请求对方对行为诠释作澄清&lt;/p>
&lt;/li>
&lt;li>
&lt;p>枕头法&lt;/p>
&lt;p>从多个角度看问题：我对你错，你对我错，双方都有对有错，这个议题不重要，前面几个立场都有道理&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>同理心&lt;/p>
&lt;ul>
&lt;li>倾听技巧
&lt;ol>
&lt;li>重在搜集信息和提供支持：借力使力/问话/释义/支持&lt;/li>
&lt;li>重在提供指示和评断：分析/忠告/评断&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>倾听应考虑的因素：性别/情境/对方和自己的反应风格&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>自我监控：以超然的眼光看待自己的所作所为&lt;/p>
&lt;/li>
&lt;li>
&lt;p>承诺：对沟通的重视意愿&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>以上是我的摘录，也是我认为该书的精华所在。如果你想了解更多，请直接读原书，很值得一读。&lt;/p></description></item><item><title>利用ssh reverse tunnel从远程向本机复制文本</title><link>https://simplecoding.fun/posts/2024/01/copy-remote-text-to-local/</link><pubDate>Fri, 26 Jan 2024 10:18:29 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2024/01/copy-remote-text-to-local/</guid><category domain="https://simplecoding.fun/categories/%E5%B7%A5%E5%85%B7/">工具</category><description>&lt;p>PS: 这篇文章已经过时，最新解决方案请参考：&lt;a href="https://www.reddit.com/r/vim/comments/k1ydpn/a_guide_on_how_to_copy_text_from_anywhere/"target="_blank" rel="external nofollow noopener noreferrer">链接&lt;/a>&lt;/p>
&lt;p>软件开发工作中，用ssh登录后在远程机器上操作，常常需要从远程机器上往本地复制文本。如果是小段的文本，一般在终端选中即可在本地粘贴；但是如果是大段的文本（超过一个屏幕），就没法一次性选中，复制操作变得很麻烦。这里提供一种方法，利用ssh reverse tunnel，可以很方便地将远程大段文本拷贝到本地。&lt;/p>
&lt;p>基本思路是：在本地开启一个服务，其监听端口为5689，这个服务持续地将接收到的文本拷贝到剪贴板；利用ssh reverse tunnel将远程机器上的5689端口与本地的5689端口连接起来；在远程机器上，将需要复制的大段文本发送到其5689端口，这段文本就会出现在本地机器的剪贴板里。&lt;/p>
&lt;h2 id="本地开启服务" class="heading-element">&lt;span>本地开启服务&lt;/span>
 &lt;a href="#%e6%9c%ac%e5%9c%b0%e5%bc%80%e5%90%af%e6%9c%8d%e5%8a%a1" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>命令行中执行以下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> nc -l -p &lt;span class="m">5689&lt;/span> &lt;span class="p">|&lt;/span> xclip -selection c&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动netcat监听5689端口，将接收到的任何数据拷贝到剪贴板，然后继续监听。&lt;/p>
&lt;p>现在，可以在本地测试一下效果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;send me to local clipboard&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> nc -q0 localhost &lt;span class="m">5689&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -q0 是为了去除文本末尾的eof&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="将服务暴露给远程机器" class="heading-element">&lt;span>将服务暴露给远程机器&lt;/span>
 &lt;a href="#%e5%b0%86%e6%9c%8d%e5%8a%a1%e6%9a%b4%e9%9c%b2%e7%bb%99%e8%bf%9c%e7%a8%8b%e6%9c%ba%e5%99%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>ssh reverse tunnel 可以在远程机器和本地机器之间建立一个通道，在远程机器和本地机器各指定一个端口，并将它们连接在一起，这是通过-R参数实现的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ssh user@remote-server.com -R 5689:localhost:5689&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以将此配置写入&lt;code>.ssh/config&lt;/code>，在对应的host条目里添加下面这行，以后登录ssh都会自动建立这个通道。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">RemoteForward &lt;span class="m">5689&lt;/span> localhost:5689&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在，可以在远程机器上执行以下命令测试一下效果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;send me to local clipboard&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> nc -q0 localhost &lt;span class="m">5689&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="从远程机器发送文本" class="heading-element">&lt;span>从远程机器发送文本&lt;/span>
 &lt;a href="#%e4%bb%8e%e8%bf%9c%e7%a8%8b%e6%9c%ba%e5%99%a8%e5%8f%91%e9%80%81%e6%96%87%e6%9c%ac" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>经过以上步骤，只要在远程机器上将数据发往其5689端口，数据就会出现在本地剪贴板了。不过我最常用的场景是在vim中复制文本，把这部分操作进一步简化就很有必要了。为此，我在.vimrc中添加如下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;#34; :CL copy from remote ssh to local&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">command&lt;/span>&lt;span class="p">!&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="nx">range&lt;/span> &lt;span class="nx">CL&lt;/span> &lt;span class="k">execute&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;line1&amp;gt;,&amp;lt;line2&amp;gt;w !nc -N localhost 5689&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加了一个自定义命令CL，执行这个命令时，被选中的文本就会发送到5689端口，进而传回到本机的剪贴板。&lt;/p>
&lt;p>如此，当我在远程机器上的vim中想要复制文本时，我就先选中这段文本，然后执行命令&lt;code>:CL&lt;/code>，接下来就可以从本地机器的剪贴板粘贴了。&lt;/p>
&lt;h2 id="更进一步" class="heading-element">&lt;span>更进一步&lt;/span>
 &lt;a href="#%e6%9b%b4%e8%bf%9b%e4%b8%80%e6%ad%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>在远程机器的.bashrc中设置以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ncp&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nc -N localhost &lt;span class="m">5689&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp2l&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> base64 &lt;span class="nv">$1&lt;/span> &lt;span class="p">|&lt;/span> ncp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在本地机器的.bashrc中设置以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> cp2l &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xclip -selection c -o &lt;span class="p">|&lt;/span> base64 -d &amp;gt; &lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，分别在远程和本地机器上执行以下命令（会利用base64工具的编码和解码功能）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp2l file&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就可以将远程机器上的file文件复制到本地了。&lt;/p>
&lt;h2 id="参考" class="heading-element">&lt;span>参考&lt;/span>
 &lt;a href="#%e5%8f%82%e8%80%83" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/dergachev/8259104"target="_blank" rel="external nofollow noopener noreferrer">https://gist.github.com/dergachev/8259104&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qbee.io/misc/reverse-ssh-tunneling-the-ultimate-guide/"target="_blank" rel="external nofollow noopener noreferrer">https://qbee.io/misc/reverse-ssh-tunneling-the-ultimate-guide/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>人生要做什么</title><link>https://simplecoding.fun/posts/2024/01/what-to-do/</link><pubDate>Fri, 12 Jan 2024 00:53:56 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2024/01/what-to-do/</guid><category domain="https://simplecoding.fun/categories/%E6%80%9D%E7%BB%B4/">思维</category><description>&lt;p>关于人生的意义，《活出生命的意义》一书中说：“人不应该问他的生命之意义是什么，而必须承认是生命向他提出了问题。简单地说，生命对每个人都提出了问题，他必须通过对自己生命的理解来回答生命的提问。”你会如何回答这个问题呢？&lt;/p>
&lt;p>于我而言，人生中最重要的是体验，体验到一种成就感、意义感、幸福感。回顾我自己的人生经历，结合对历史上我所敬佩的那些人的观察，我发现我长久以来孜孜以求的，就是这几种感觉。当我通过运用自己的能力，做好一件事，或者完成一件作品，我会体验到一种成就感，这种成就感会给我长久的满足。当我知道我为什么做一件事，知道我做的事情会对他人产生正面影响，我会感到这件事是有意义的，这种意义感也会给我长久的满足。这些都是幸福感的重要来源。相反，如果做事时常常挫败，或者不知道自己做的事是为了什么，就很容易陷入沮丧和消沉。&lt;/p>
&lt;p>那么怎么更多获得这样的正面体验呢？根据著名的马斯洛需求层次理论，越高层次需求的满足，特别是自我实现，越能给我们带来成就感、意义感和幸福感。而自我决定论指出，人的三种内在动机包括自主感、胜任感和归属感，当我们在做一件事的过程中，感到这件事不是被迫做的，感到自己有足够的能力做好这件事，感到做好这件事能给他人带来正面影响，我们就会由衷地感到满足。我们应该尽可能多做这样的事情。&lt;/p>
&lt;p>《象与骑象人》指出，幸福的两大原则是：进展原则和适应原则。进展原则是说，达到目标后的幸福是短暂的，朝着目标不断前进比达到目标更幸福。适应原则是说，从长远来看，我们总会适应所遇到的“顺境”或“逆境”。因此不可能存在一个能永保幸福的标准，不可能说得到了某件事物，做成了某件事情，就保证幸福了。在我们的一生中，我们必须不停地做事情，制定目标，全力以赴去实现目标。但是须谨记，应该在这整个过程中去体验幸福感，而不是寄希望于达成目标的那一刹那。&lt;/p>
&lt;p>如何看待世俗所追求的名和利呢？最好的态度是把名利视为做事的工具，而不是最终目的。名利显然不等于幸福，也未必带来幸福，利欲熏心者最终只能成为名利的奴隶。但也不必排斥名利，首先，作为凡夫俗子，多多少少会有名利心，这是很正常的；其次，如果出发点是善的，更多的财富，更好的名声，可以使我们更加便利地做事，给他人带来更多的帮助；再次，在做事的过程中，当我们为社会解决了更多的问题，名声和财富常常会随之自然而来，强行拒之门外反而是不自然的，佛家说莫执着，沉湎于名利是执着，而避之唯恐不及恐怕也是一种执着。&lt;/p>
&lt;p>人终究走向死亡，正如佛陀所说，“如梦幻泡影，如露亦如电”。 在死亡面前，一切都如过眼云烟，微不足道。如果说人生是个梦，我依然希望是精彩的梦，梦中全心全意去体验。&lt;/p>
&lt;p>我相信，到这个世界上我们是带着使命来的，我们每个人都有独一无二的天赋。我们需要相信天道，充分发挥天赋，不断超越自己，去做事，去解决问题，去创造属于自己的作品，给这个世界增添一些属于自己的色彩，就不枉来这世上走一遭了。&lt;/p>
&lt;p>&lt;em>PS: 翻看自己的日志，发现自己多年前写过一篇小文&lt;a href="https://simplecoding.fun/posts/2009/12/old-essay-mood-recording/">明吾志&lt;/a>，原来自己那时就已经在思考这些问题了。能够看出，今天的很多看法在当时已有萌芽，可以说是一脉相承的。只是，当时思考比较简单，不够深入，不成体系，在随后的这些年里也并未踏实践行，在遇到挫折时常常会怀疑自己，踌躇不定，这也导致这些年走了不少弯路。不过，随着人生经历的增加，读了一些书，行了一些路，识了一些人，自己对这些问题的认识和体会也更加深刻。虽然看似又回到了原点，但其实深度不可同日而语。马克思说事物的发展是螺旋上升的，我想我的思想认识也是如此。对自己是谁更加清晰，对自己要去哪儿更加坚定，我想这也是那些弯路的价值。人生没有白走的路，那些杀不死我的，必将使我更强大。&lt;/em>&lt;/p></description></item><item><title>乐山峨眉山之旅</title><link>https://simplecoding.fun/posts/2023/12/travel-mount-emei/</link><pubDate>Wed, 27 Dec 2023 23:20:00 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2023/12/travel-mount-emei/</guid><category domain="https://simplecoding.fun/categories/%E7%94%9F%E6%B4%BB/">生活</category><description>&lt;p>去成都出差，趁着周末去了趟乐山和峨眉山。&lt;/p>
&lt;h2 id="2023年10月28日" class="heading-element">&lt;span>2023年10月28日&lt;/span>
 &lt;a href="#2023%e5%b9%b410%e6%9c%8828%e6%97%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>早上6:30从酒店出发，7:20的成都东站高铁，8:10到乐山，出租车到重百吃早餐，随后打车去乐山大佛景点，佛脚平台因修整而不开放，无法到佛脚平台仰观，只能在佛头顶平台俯瞰。佛倚壁而坐，面前即是南流的岷江，体积巨大，“佛即一座山，山是一尊佛”，诚非虚言。然后在凌云寺上了香，便出东门打车，到高铁站去峨眉山。&lt;/p>
&lt;p>下高铁后，稍微规划了一下路线。打车到报国寺附近，此处有秀甲瀑布、儒释道文化长廊，流连片刻，吃了点特色美食，便到游客中心买票，坐大巴进山了。&lt;/p>
&lt;p>一路雾气缭绕，行了近两个小时到达雷洞坪，一下车冷气即扑面而来，打听得知预订的旅馆还在前面四公里处，于是租个大衣继续前行。不多时便遇到了几个河南老乡，于是相约结伴登山。到旅馆时天已近黑，我放了行李，跟他们继续往上登。又爬了半个多小时达到金顶，雾气很浓，我们随意逛逛，找到一处次日早晨观日出的绝佳地点，随意拍了几张照片。其中一位同行者带了帐篷，就地住下，我们其他几位便下山，回旅店休息。在旅店用携带的甜皮鸭垫垫肚子，跟同行的两位女生约定好次日早上5点半出发，之后便休息了。&lt;/p>
&lt;h2 id="2023年10月29日" class="heading-element">&lt;span>2023年10月29日&lt;/span>
 &lt;a href="#2023%e5%b9%b410%e6%9c%8829%e6%97%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>早上五点半准时出发，雾气早已散了，仰望天空，繁星点点，圆月西斜，山林寂静，唯闻登山者步履声。大约半个小时，到达金顶，先虔诚敬拜普贤菩萨，后至观日出地点，抢占有利地形，一边欣赏挂满繁星的天空和仙气飘飘的云海，一边满怀期待地等待日出。&lt;/p>
&lt;p>大概7点10分，随着众人的欢呼声，太阳终于把第一缕光洒向人间。我用手机视频记录了日出全过程。结束后在金顶烧香拜佛，虔诚许愿。拍完合照后一起下山。&lt;/p>
&lt;p>到达雷洞坪，坐大巴去零公里停车场，然后坐老乡的车下去，一同吃了午饭，徒步到万年寺。在万年寺的前面，亲眼见到了猴子打劫行人，直接翻查行人的包裹找吃的。&lt;/p>
&lt;p>然后原路返回停车场，路上喝喝茶，跟老乡聊聊天，诉说诉说平日的烦恼，分享分享对生活的看法，由于是萍水相逢，也就无所顾忌。&lt;/p>
&lt;p>在离开峨眉山之前，我让老乡带我去周一甜皮鸭，买了一只甜皮鸭给辉辉寄回去，然后我们就驱车返回成都。&lt;/p>
&lt;p>热情的老乡直把我送到酒店门口，峨眉之旅遂结束。&lt;/p>
&lt;h2 id="照片" class="heading-element">&lt;span>照片&lt;/span>
 &lt;a href="#%e7%85%a7%e7%89%87" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231028_094937.jpg" alt="/ox-hugo/IMG_20231028_094937.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231028_094937.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231028_094937.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231028_094937.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231028_094937.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231028_102127.jpg" alt="/ox-hugo/IMG_20231028_102127.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231028_102127.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231028_102127.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231028_102127.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231028_102127.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231028_125612.jpg" alt="/ox-hugo/IMG_20231028_125612.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231028_125612.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231028_125612.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231028_125612.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231028_125612.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231029_054156.jpg" alt="/ox-hugo/IMG_20231029_054156.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231029_054156.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231029_054156.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231029_054156.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231029_054156.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/mmexport1698579211763.jpg" alt="/ox-hugo/mmexport1698579211763.jpg" srcset="https://simplecoding.fun/ox-hugo/mmexport1698579211763.jpg?size=small, https://simplecoding.fun/ox-hugo/mmexport1698579211763.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/mmexport1698579211763.jpg?size=large 2x" data-title="/ox-hugo/mmexport1698579211763.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231029_061036.jpg" alt="/ox-hugo/IMG_20231029_061036.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231029_061036.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231029_061036.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231029_061036.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231029_061036.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231029_064229.jpg" alt="/ox-hugo/IMG_20231029_064229.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231029_064229.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231029_064229.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231029_064229.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231029_064229.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231029_070718.jpg" alt="/ox-hugo/IMG_20231029_070718.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231029_070718.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231029_070718.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231029_070718.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231029_070718.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231029_101820.jpg" alt="/ox-hugo/IMG_20231029_101820.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231029_101820.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231029_101820.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231029_101820.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231029_101820.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231029_104855.jpg" alt="/ox-hugo/IMG_20231029_104855.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231029_104855.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231029_104855.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231029_104855.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231029_104855.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/IMG_20231029_072506_1.jpg" alt="/ox-hugo/IMG_20231029_072506_1.jpg" srcset="https://simplecoding.fun/ox-hugo/IMG_20231029_072506_1.jpg?size=small, https://simplecoding.fun/ox-hugo/IMG_20231029_072506_1.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/IMG_20231029_072506_1.jpg?size=large 2x" data-title="/ox-hugo/IMG_20231029_072506_1.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/mmexport1698584317610.jpg" alt="/ox-hugo/mmexport1698584317610.jpg" srcset="https://simplecoding.fun/ox-hugo/mmexport1698584317610.jpg?size=small, https://simplecoding.fun/ox-hugo/mmexport1698584317610.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/mmexport1698584317610.jpg?size=large 2x" data-title="/ox-hugo/mmexport1698584317610.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/mmexport1698586067967.jpg" alt="/ox-hugo/mmexport1698586067967.jpg" srcset="https://simplecoding.fun/ox-hugo/mmexport1698586067967.jpg?size=small, https://simplecoding.fun/ox-hugo/mmexport1698586067967.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/mmexport1698586067967.jpg?size=large 2x" data-title="/ox-hugo/mmexport1698586067967.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p></description></item><item><title>节气生活修行</title><link>https://simplecoding.fun/posts/2023/12/solar-terms-life-practice/</link><pubDate>Thu, 07 Dec 2023 10:41:46 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2023/12/solar-terms-life-practice/</guid><category domain="https://simplecoding.fun/categories/%E7%94%9F%E6%B4%BB/">生活</category><description>&lt;h2 id="生活修行准则" class="heading-element">&lt;span>生活修行准则&lt;/span>
 &lt;a href="#%e7%94%9f%e6%b4%bb%e4%bf%ae%e8%a1%8c%e5%87%86%e5%88%99" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;blockquote>
&lt;p>精进，以持戒为首要；疾病，以减食为汤药；&lt;br>
烦恼，以忍辱为妙解；是非，以不辩为解脱；&lt;br>
待人，以诚实为真情；执事，以尽心为有功；&lt;br>
语言，以减少为直截；上下，以慈和为进德；&lt;br>
学问，以勤习为入门；因果，以明白为无过；&lt;br>
老病，以无常为警策；修行，以精虔为切要；&lt;br>
敬客，以谦益为供养；居室，以朴实为庄严；&lt;br>
凡事，以预办为不牢；处众，以慎言为常礼；&lt;br>
遇险，以不乱为章程；济物，以慈悲为根本。&lt;/p>
&lt;/blockquote>
&lt;h2 id="各节气修行主题" class="heading-element">&lt;span>各节气修行主题&lt;/span>
 &lt;a href="#%e5%90%84%e8%8a%82%e6%b0%94%e4%bf%ae%e8%a1%8c%e4%b8%bb%e9%a2%98" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;h3 id="冬至" class="heading-element">&lt;span>冬至&lt;/span>
 &lt;a href="#%e5%86%ac%e8%87%b3" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>原学篇&lt;/strong>
&lt;em>（明）许孚远&lt;/em>&lt;br>
天然自有之谓性，效性而动之谓学。性者万物之一原，学者在人之能事。故曰天地之性人为贵，为其能学也。学然后可以尽性，尽己性以尽人物之性，则可以赞天地之化育，而与天地参而为三才，故学之系于人者大也。&lt;br>
天聪天明，非学不固；威仪动止，非学不端；刚柔善恶之质，非学不化；仁义礼智信之德，非学不完；君臣、父子、夫妇、昆弟、朋友之伦，非学不尽；富贵贫贱之遇，非学不达。学则智，不学则愚；学则治，不学则乱。自古圣贤盛德大业，未有不由学而成者也。故先师孔子特揭学之一言以诏来世，而其自名，惟曰学而不厌而已。性之理无穷，故学之道无尽，学而不厌，孔子之所以为孔子也。&lt;br>
然而三代以上，道明而学醇；三代以下，道丧而学杂，高之沦于空虚，卑之局于器数，浸淫于声利，靡滥于词章。呜呼！学其所学，而非孔子之所谓学也。其卓然志于孔子之学，不为他道所惑者，寥寥数千载之间，几人而已。乃其见有偏全，言有离合，行有至不至，择而取之，则又存乎其人焉。故学以尽性为极，以孔子为宗。若射之有的，发而必中，若川之归海，不至于已矣，夫然后可以语学。学之义大矣哉！&lt;br>
学者既有志于孔子之学，则必知夫求端用力之地。孔子之学，自虞廷精一执中而来，其大旨在为仁，其告颜子以克己复礼，最为深切著明者也。人心本来具此生理，名之曰仁。此理不属血气，不落形骸，故直云克己。己私一克，天理具存，视听言动，各有当然之则，故云复礼。一日克己复礼，则无我无人，平平荡荡，万物一体，故曰天下归仁。&lt;br>
己最难克，仁最难言，因循牵系，终身陷溺；刚毅深潜，一日可至，故曰为仁由己而不由人。出此入彼，即在身心之间，其机至严，其用至博，故曰非礼勿视听言动。此孔门学脉也。他如言敬，言恕，言忠信，言闲邪存诚，言洗心藏密，言格物致知、诚意正心，无非此理，无非此学，神而明之，存乎其人焉尔矣。&lt;br>
是故舍仁而不求者，昧其本心，不可立人道于天地之间；不由克己复礼而言仁者，道不胜欲，公不胜私，而徒以闻见凑泊气魄承当，无强至于仁之理。知克己者，一私不容，气质浑化，故功利权谋之说，非所可入。知复礼者，体用俱全，万理森著，故虚无寂灭之教，非所可同。修此之谓天德，达此之谓王道，此孔子之学，自精一执中而来，为万世立人极者也。学者于斯笃信不惑，而行之不惰，其庶几乎可以语学也夫！&lt;br>
学不贵谈说，而贵躬行；不尚知解，而尚体验。《易》曰：“默而成之，不言而信，存乎德行。”孟子曰：“君子所性，仁义礼智根于心，其生色也，睟然见于面，盎于背，施于四体，四体不言而喻。”此其说也。是故性定者，其言安以舒；养深者，其容静以肃；内直者，其动简；德盛者，其心下。反之，而躁妄、轻浮、繁扰、骄泰生焉。盖理欲消长之机，志气清浊之辨，见于动静，微于应感，如影随形，不可掩也。&lt;br>
昔者虞舜，夔夔齐栗，以格其亲，而好问好察，善与人同，乃见其精一之学。文王在宫在庙，雝雝肃肃，而无然畔援，无然歆羨，乃见其敬止之功。孔子温良恭俭让，萃至德于其躬，而意必固我，至于尽忘，乃其学而不厌之实。凡古今圣贤所为师表人伦信今传后者，必以躬修道德而致之，断非声音笑貌之所能为也。故学者之学，务实修而已矣。&lt;br>
珠藏而渊媚，玉韫而山辉，德聚于其中而发见于其外。有不修，修之未有无其验者也。不修而伪为于外，与夫修之未至，而欲速助长操上人之心者，皆孟子所谓无源之水，易盈易涸，不可长久矣。&lt;br>
故曰：“君子之道闇然而日章，小人之道的然而日亡。”言忠信，行笃敬，虽蛮貊之邦行矣。言不忠信，行不笃敬，虽州里行乎哉？诚伪虚实，判若霄壤，其理甚明。内辨诸身心，外证诸家国，学之终身，不至不已，斯学之道也。&lt;/p>
&lt;/blockquote>
&lt;h3 id="小寒" class="heading-element">&lt;span>小寒&lt;/span>
 &lt;a href="#%e5%b0%8f%e5%af%92" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>颜子所好何学论&lt;/strong>
&lt;em>（宋）程颐&lt;/em>&lt;br>
圣人之门，其徒三千，独称颜子为好学。夫《诗》、《书》、六艺，三千子非不习而通也，然则颜子所独好者，何学也﹖学以至圣人之道也。圣人可学而至与﹖曰：然。学之道如何﹖曰：天地储精，得五行之秀者为人。其本也真而静，其未发也五性具焉，曰仁义礼智信　。形既生矣，外物触其形而于中矣，其中动而七情出焉，曰喜怒哀惧爱恶欲。情既炽而益荡，其性凿矣。是故觉者约其情使合于中，正其心，养其性，故曰「性其情」。愚者则不知制之，纵其情而至于邪僻，牿其性而亡之，故曰「情其性」。凡学之道，正其心，养其性而已。中正而诚，则圣矣。君子之学，必先明诸心，知所养，然后力行以求至，所谓「自明而诚」也。故学必尽其心，尽其心则知其性。知其性，反而诚之，圣人也。故《洪范》曰：「思曰睿，睿作圣。」诚之之道，在乎信道笃。信道笃则行之果，行之果则守之固，仁义忠信不离乎心，造次必于是，颠沛必于是，出处语默必于是。久而弗失，则居之安，动容周旋中礼，而邪僻之心无自生矣。故颜子所事，则曰「非礼勿视，非礼勿听，非礼勿言，非礼勿动」。仲尼称之，则曰「得一善则拳拳服膺，而弗失之矣」，又曰「不迁怒，不贰过」，「有不善未尝不知，知之未尝复行也」。此其好之笃，学之之道也。视听言动皆礼矣，所异于圣人者；圣人则不思而得，不勉而中，从容中道；。颜子则必思而后得，必勉而后中。故曰：颜子之与圣人，相去一息。孟子曰：「充实而有光辉之谓大，大而化之之谓圣，圣而不可知之谓神。」颜子之德，可谓充实而有光辉矣；所未至者，守之也，非化之也。以其好学之心，假之以年，则不日而化矣。故仲尼曰：「不幸短命死矣！」盖伤其不得至于圣人也。所谓化之者，入于神而自然，不思而得，不勉而中之谓也，孔子曰「七十而从心所欲，不踰矩」是也。或曰：「圣人，生而知之者也。今谓可学而至，其有稽乎﹖」曰：「然。孟子曰：『尧、舜，性之也；汤、武，反之也。』性之者，生而知之者也；反之者，学而知之者也。」又曰：「孔子则生而知也，孟子则学而知也。后人不达，以谓『圣本生知，非学可至』，而为学之道遂失。不求诸己而求诸外，以博文强记、巧文丽辞为工，荣华其言，鲜有至于道者，则今之学与颜子所好异也。」&lt;/p>
&lt;/blockquote>
&lt;h3 id="大寒" class="heading-element">&lt;span>大寒&lt;/span>
 &lt;a href="#%e5%a4%a7%e5%af%92" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>求放心说&lt;/strong>
&lt;em>（明）刘宗周&lt;/em>&lt;br>
程子曰：“心要在腔子里”，此本孟子求放心而言，然则人心果时放外耶？即放外，果在何处？因读《孟子》上文云：“仁，人心也。”乃知心有不仁时，便是放。所谓“旷安宅而弗居也。”故阳明先生曰：“程子所谓腔子，亦即是天理。”至哉言乎！程子又曰：“吾学虽有所授，然天理二字，却是自家体认出来。”夫既从自家体认而出，则非由名象凑泊可知。凡仁与义，皆天理之名象，而不可即以名象为天理，谓其不属自家故也。试问学者，何处是自家一路？须切己反观，推究到至隐至微处，方有着落。此中无一切名象，亦并无声臭可窥，只是个维玄维默而已。虽维玄维默，而实无一物不体备其中，所谓天也。故理曰天理，才着人分，便落他家。一属他家，便无归宿。仔细检点，或以思维放，或以卜度放，或以安排放，或以智故放，或以虚空放，只此心动一下，便是放。所放甚微，而人欲从此而横流，其究甚大。盖此心既离自家，便有无所不至者。心斋云：“凡有所向，有所见，皆是妄。”既无所向，又无所见，便是无极而太极。无极而太极，即自家真底蕴处。学者只向自家寻底蕴，常做个体认工夫，放亦只放在这里，求亦只求在这里，岂不至易？岂不至简？故求放心三字，是学人单提口诀，下士得之为入道之门，上根得之即达天之路。&lt;/p>
&lt;/blockquote>
&lt;h3 id="立春" class="heading-element">&lt;span>立春&lt;/span>
 &lt;a href="#%e7%ab%8b%e6%98%a5" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>应事说&lt;/strong>
&lt;em>（明）刘宗周&lt;/em>&lt;br>
学者静中既得力，又有一段读书之功，自然遇事能应。若静中不得力，所读之书，又只是章句而已，则且教之就事上磨练去。自寻常衣食以外，感应酬酢，莫非事也。其间千万变化，不可端倪，而一一取裁于心，如权度之待物然。权度虽在我，而轻重长短之形，仍听之于物，我无与焉，所以情顺万事而无情也。故事无大小，皆有理存，劈头判箇是与非。见得是处，断然如此，虽鬼神不避；见得非处，断然不如此，虽千驷万锺不回。又于其中条分缕析，铢铢两两，辨箇是中之非，非中之是，似是之非，似非之是。从此下手，沛然不疑，所行动有成绩。又凡事有先着，当图难于易，为大于细。有要着，一着胜人千万着；失此不着，满盘败局。又有先后着，如低棋以后着为先着，多是见小欲速之病。又有了着，恐事至八九分，便放手，终成决裂也。盖见得是非后，又当计成败，如此方是有用学问。世有学人，居恒谈道理井井，才与言世务便疏。试之以事，或一筹莫展。这疏与拙，正是此心受病处，非关才具。谚云：“经一跌，长一识。”且须熟察此心受病之原，果在何处，因痛与之克治去，从此再不犯跌，庶有长进。学者遇事不能应，只有练心法，更无练事法。练心之法，大要只是胸中无一事而已。无一事乃能事事，便是主静工夫得力处。又曰：“多事不如少事，省事不如无事。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="雨水" class="heading-element">&lt;span>雨水&lt;/span>
 &lt;a href="#%e9%9b%a8%e6%b0%b4" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>定性书&lt;/strong>
&lt;em>（宋）程颢&lt;/em>&lt;br>
所谓定者，动亦定，静亦定，无将迎，无内外。苟以外物为外，牵己而从之，是以己性为有内外也。且以己性为随物于外，则当其在外时，何者为在内？是有意于绝外诱，而不知性之无内外也。既以内外为二本，则又乌可遽语定哉！&lt;br>
夫天地之常，以其心普万物而无心；圣人之常，以其情顺万物而无情。故君子之学，莫若廓然而大公，物来而顺应。《易》曰：“贞吉悔亡。憧憧往来，朋从尔思。”苟规规于外诱之除，将见灭于东而生于西也，非惟日之不足，顾其端无穷，不可得而除也。&lt;br>
人之情各有所蔽，故不能适道，大率患在于自私而用智。自私则不能以有为为应迹，用智则不能以明觉为自然。今以恶外物之心，而求照无物之地，是反鉴而索照也。《易》曰：“艮其背，不获其身。行其庭，不见其人。”孟氏亦曰：“所恶于智者，为其凿也。”与其非外而是内，不若内外之两忘也。两忘则澄然无事矣。无事则定，定则明，明则尚何应物之为累哉！&lt;br>
圣人之喜，以物之当喜；圣人之怒，以物之当怒。是圣人之喜怒，不系于心而系于物也。是则圣人岂不应于物哉？乌得以从外者为非，而更求在内者为是也？今以自私用智之喜怒，而视圣人喜怒之正为何如哉？夫人之情易发而难制者，唯怒为甚。第能于怒时遽忘其怒，而观理之是非，亦可见外诱之不足恶，而于道亦思过半矣。&lt;/p>
&lt;/blockquote>
&lt;h3 id="惊蛰" class="heading-element">&lt;span>惊蛰&lt;/span>
 &lt;a href="#%e6%83%8a%e8%9b%b0" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>寡欲论&lt;/strong>
（《答林子仁》）
&lt;em>（明）黄宗明&lt;/em>&lt;br>
（林子仁）来谕谓：“此心之中，无欲即静，遇事时不觉交战，便是得力。”所言甚善，尚有不得不论者。盖无欲即静，与周子《图说》内自註无欲故静之说，亦略相似。其谓遇事时不觉交战，便是得力，亦谓心中有主，不为事物所胜云耳。然尝闻之，程子曰：“为学不可不知用力处，既学不可不知得力处。”周子曰：“养心莫善於寡欲，寡之又寡，以至於无。”正不在得力，而在於知所以用力；不在无欲，而在寡欲耳。学必寡欲而后无欲，知用力而后知得力，此其工夫渐次，有不可猎而进者。若执事所言，恐不免失之太早。如贫人说富，如学子论大贤，功效体当，自家终无受用时也。仆之所谓主静者，正在寡欲，正在求所以用力处，亦不过求之於心，体之於心，验之於心。盖心为事胜，与物交战，旨欲为之累。仆之所谓主静者，正以寻欲所从生之根而拔去之，如逐贼者，必求贼所潜入之处而驱逐之也。是故善学者莫善於求静，能求静然后气得休息，而良知发见。凡其思虑之烦杂，私欲之隐藏，自能觉察，自能拔去，是故无欲者本然之体也，寡欲者学问之要也，求静者寡欲之方也，戒惧者求静之功也。知用力而后得力处，可得而言无欲，真体常存常见矣。&lt;/p>
&lt;/blockquote>
&lt;h3 id="春分" class="heading-element">&lt;span>春分&lt;/span>
 &lt;a href="#%e6%98%a5%e5%88%86" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>改过说&lt;/strong>
&lt;em>（明）刘宗周&lt;/em>&lt;br>
天命流行，物与无妄，人得之以为心。是谓本心。人心无一妄而已。忽焉有妄，希乎微乎？其不得而端倪乎？是谓微过，独知主之；有微过，是以有隐过，七情主之；有隐过，是以有显过，九容主之；有显过，是以有大过，五伦主之；有大过，是以有丛过，百行主之。总之妄也。譬之木自本而根、而干、而标，水自源而后及于流，盈科而至於放海，故曰：“涓涓不息，将成江河；绵绵不绝，将寻斧柯。”是以君子贵防之早也。其惟慎独乎？慎独则时时知改。俄而授之隐过矣，当念过，便从当念改；又授之显过矣，当身过，便从当身改；又授之大过矣，当境过，当境改；又授之丛过矣，随事过，随事改。改之则复於无过，可喜也；不改成过，且得无改乎？总之皆祛妄还真之学，而工夫次第如此。譬之擒贼者，擒之於室甚善，不於室而於堂，不於堂而於外门，於衢，於境上，必成擒而后已。子绝四：毋意，毋必，毋固，毋我。真能慎独者也。其次则“克伐怨欲不行焉尔。”宋人之言曰：“独行不愧影，独行不愧衾。”独而显矣；司马温公则云：“某平生无甚过人处，但无一事不可对人言者。”庶几免於大过乎？若邢恕之一日三检点，则丛过对治法也。真能慎独者，无之非独，即邢恕学问，孔子亦用得着，故曰“不为酒困。”不然自原宪而下，总是个闲居小人，为不善而已。善学者须学孔子之学，只於意根上止截一下，便千了百当。若到必固我，已渐成决裂，幸於我处止截得，犹不失为颜子，克己过，此无可商量矣。落一格，粗一格，工夫转愈难一格，故曰：“可为难矣。”学者须是学孔子之学。&lt;br>
人之言曰：“有心为恶，无心为过。”则过容有不及知者，因有不及改，是大不然。夫心不爱过者也，才有一点过，便属碍膺之物，必一决之而后快。故人未有有过而不自知者，只不肯自认为知尔。然则过又安从生？曰只不肯自认为知处，其受蔽处良多，以此造过遂多，仍做过不知而已。孟子言：“君子之过，如日月之食。”可见人心只是一团灵明，而不能不受暗於过。明处是心，暗处是过。明中有暗，暗中有明。明中之暗，即是过；暗中之明，即是改，手势如此亲切。但常人之心，忽明忽暗，展转出没，终不能还得明明之体，不归薄蚀何疑？君子则以暗中之明，用箇致曲工夫，渐次与它恢扩去，在《论语》则曰“讼过”，如两造当庭，抵死仇对，不至十分明白不已。才明白，便无事。如一事有过，直勘到事前之心，果是如何？一念有过，直勘到念后之事，更当如何？如此反覆推勘，更无躲闪，虽一尘亦驻足不得，此所谓致曲工夫也。《大易》则言“补过”，谓此心一经缺陷，便立刻与之圆满那灵明尔。若只是小小补缀，头痛救头，脚痛救脚，败缺难掩，而弥缝日甚，谓之文过而已。虽然，人犹有有过而不自知者。“子路，人告之以有过则喜。”子曰：“丘也幸，苟有过，人必知之。”然则学者虚心，逊志时务，察言观色，以辅所不逮，有不容缓者。&lt;/p>
&lt;/blockquote>
&lt;h3 id="清明" class="heading-element">&lt;span>清明&lt;/span>
 &lt;a href="#%e6%b8%85%e6%98%8e" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>克己箴&lt;/strong>
&lt;em>（明）赵贞吉&lt;/em>&lt;br>
天地万物，本吾一体也，而吾何以知天地万物之然哉？天地非仁将恐折，万物非仁将恐歇，吾心非仁吾身将恐蹶。吾何以知吾身之然哉？吾视非仁，盲从目生，吾听非仁，聋从耳腾，吾言非仁，吾过瞢瞢，吾动非仁，身过殷殷。呜乎！微翳眯睛，则八方易位，一念颠倒，而人己成敌。执迷为真，贼以代子，四窍尘投，一妙觉死。乐出於虚，蒸则成菌，既死之心，不可复振。蜗窟蚓穴，去仁几何！鸢飞鱼跃，於仁何若！古之有道，去彼取此，三才归根，一日克己。吾何以知有道之然哉？以其无己也，故能成其己。呜乎！吾有大己，俯万物而观天地者也。大己不浃，小己揭揭，小己既克，大己泼泼。古之善克者，视於无形，听於无声，动无轨辙，言非述称，四用反一，一真流行，无体无方，礼嘉而亨。少有意必固我作累，妙用齐滞，具为痿痺，此为不仁，而株橛小己。是故无己为克，真己为大，至大为仁。体无对待，不见大小，正知内外？性此曰圣，复此曰贤，小子至愚，择焉执焉。昔者吾友从事於此，敢告非狂，为仁由己。&lt;/p>
&lt;/blockquote>
&lt;h3 id="谷雨" class="heading-element">&lt;span>谷雨&lt;/span>
 &lt;a href="#%e8%b0%b7%e9%9b%a8" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>读书说&lt;/strong>
&lt;em>（明）刘宗周&lt;/em>&lt;br>
朱夫子尝言：“学者半日静坐，半日读书，如此三年，必有进步可观。”今当取以为法，然除却静坐工夫，亦无以为读书地，则其实亦非有两程候也。学者诚于静坐得力时，徐取古人书读之，便觉古人真在目前，一切引翼提撕，匡救之法，皆能一一得之于我，而其为读书之益，有不可待言者矣。昔贤诗云：“万径千蹊吾道害，四书六籍圣贤心。”学者欲窥圣贤之心，遵吾道之正，舍四书六籍，无由而入矣。盖圣贤之心，即吾心也，善读书者，第求之吾心而已矣。舍吾心而求圣贤之心，即千言万语，无有是处。阳明先生不喜人读书，令学者直证本心，正为不善读书者，舍吾心而求圣贤之心，一似沿门持钵，无益贫儿，非谓读书果可废也。先生又谓“博学只是学此理，审问只是问此理，慎思只是思此理，明辨只是辨此理，笃行只是行此理”，而曰“心即理也”，若是乎此心此理之难明，而必假途於学问思辨，则又将何以学之、问之、思之、辨之，而且行之乎？曰：“古人诏我矣，读书一事，非其导师乎？即世有不善读书者，舍吾心而求圣贤之心，一似沿门持钵而有得也，亦何惜不为贫儿？”昔人云士大夫：“三日不读书，即觉面目可憎，语言无味。”彼求之闻见者犹然，况有进于此者乎？惟为举业而读书，不免病道，然有志之士，卒不能舍此以用世，何可废也？吾更恶夫业举子而不读书者！&lt;/p>
&lt;/blockquote>
&lt;h3 id="立夏" class="heading-element">&lt;span>立夏&lt;/span>
 &lt;a href="#%e7%ab%8b%e5%a4%8f" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>论讲学书&lt;/strong>
（《答李赞宇》）
&lt;em>（明）曹于汴&lt;/em>&lt;br>
夫道无之是非，无人弗足，讲学以明道，士农工贾，皆学道之人，渔牧耕读，皆学道之事。隆古无讲学之名，其人皆学，故无名也。国家以文学取士，天下学校，无虑千百，章缝之士，无虑万亿，盖令其日讲所谓时习、所谓孝弟、所谓性命仁义，而以淑其身，待天下之用也。乃人心不古，遂有口耳活套，掇拾粉饰，以为出身之媒，师以是教，上以是取，恬不为异，非其质矣。而於立身行政，毫无干涉。於是君子厌薄其所为，而聚徒讲道，人遂以道学目之。若以为另是一种，岂不惑哉？然讲学之中，亦或有言然而行不然，而藉是以干贵人、捷仕径者，而其名为道学也，是有口耳活套之实，而更美其名，人谁甘之？则群起而相攻，而讲者益寡，道益晦矣。太抵所学出於实，则必闇然自修，不论大节细行，一一不肯放过，虽力量不同，未必尽无疵，而不自文以误人也。所学出於名，则有张大其门面，而於其生平未纯处，亦曲为言说，而谓其为道。夫夷之隘，不害其清；惠之不恭，不害其和，然亦何必曰此隘，此不恭正道之所在，而陋孔子於下风乎？罗近溪逢人问道，透彻心体，岂不可尚？而阔略处，亦诚其病，乃学者得其阔略以为可，便其私也。而或多不羁，诚有如止菴疏所谓贿赂干请、任情执见等说，是其坐女子於怀而乱之，而犹侈然薄鲁男子不为也，而可乎？但今因止菴之疏而遂禁其讲，是因噎废食。夫此学乃乾坤所由不毁，何可一日废也？似更当推广，而俾千百学校，亿万章缝无不讲，以及农工商贾无不讲才是。而其机则自上鼓之，若得复辟召之典，罗致四方道学，仿程子学校之议，布之天下，以主道教，於一切乡学社学之众，渐次开发，而申饬有位之士，以兴学明道为先图。其学则以躬行实践为主，随其人之根基，引之入道，或直与天通，或以人合天，或真臻悟境，或以修求悟。夫天人合一，修悟非二，舍天而言人，舍悟而言修，则浅矣。近时学者，知皆及此，然言天矣，而人尚未尽；言悟矣，而修且未能。世岂有能致中而不能致和，能正心而不修身者哉？则不可不戒也。大抵果能合天，则必益尽其人事，果能真悟，则必益尽其真修。尧、舜、文王、孔子，何人也，而兢兢业业，望道未见，徙义改过，没齿以之也。&lt;/p>
&lt;/blockquote>
&lt;h3 id="小满" class="heading-element">&lt;span>小满&lt;/span>
 &lt;a href="#%e5%b0%8f%e6%bb%a1" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>格物论&lt;/strong>
&lt;em>（明）黄佐&lt;/em>&lt;br>
物理曷谓之天理也？本於赋予禀受，自然明觉，莫之为而为者也。如恻隐之心，非纳交要誉，恶其声而然是也。物欲曷谓之人欲也？不安於品节限制，而凿以私智，非天之所以与我者也。如子贡貸殖，而必先言其不受命是也。去其所本无，而复其所固有，则万物皆备於我矣。夫理虽可以触类而长，而其出於天者，物物各有当然不易之则，自私用智，则违天而自贼，故《诗》曰“不识不知，顺帝之则”，又曰“不僭不贼，鲜不为则”，《周礼》曰“则以观德，毁则为贼”是也。则者，法也。自貌言视听而达诸人伦，无非物也，而莫不有法焉，如恭从明聪，以及亲义序别信之类是也。推之，盈天地间无一物而无理可法者，违其理则非天之法矣。《易》所谓“天则”，正以其出於天，当然不易者也。孟子亦曰：“君子行法以俟命而已矣。”岂敢毁之而自贼哉？将欲行之，必自致知始，致虽有推极之义，而《说文》原训则曰：“送，诣也。”其文为久，至触类而推极之久，则天牖帝迪，送诣而至。性之本善，吾所固有者，明而通於心中矣。是故格物所以明善也，诚意所以诚身也。身主於心，心发於意，意萌於知，知起於物，曰“致知在格物”，不言先者，知与意虽有先后，其实非二事也。知之不至，则意不诚而无物。《记》曰：“物至知知，而后好恶形焉。”何者？好善恶恶，感於物理者也，好妍恶媸，好富恶贫，感於物欲者也。道不离物，物不离事，盈天地间，物物各有一理存焉，去欲求理，岂以空谈悟哉？不曰理，而曰物者，践其实耳。郑玄曰：“格，来也。物，犹事也。”程子因言：“物来知起。”象山曰：“格至也，研磨考索，以求其至。”朱子因言：“穷至事物之理。”温公曰：“扞格外物，以物至为外，非合内外之道。”黄润玉曰：“格，正也，义取格其非心，心正矣，奚用诚意致知为哉？”是数说，皆因《记》而亿者也。惟《说文》曰：“格，木长貌，从木各声，取义於木，声以谐之。”其训精矣。今夫五行之各一其性也，水土金火汇萃鎔合，皆可为一。惟木不然，挨接暂同，终则必异。理欲同行而异情，正如桃李荆棘共陌连根，始若相似，及至条长之时，形色别矣。荆棘必剪，犹恶之菑逮夫身者也，桃李必培，犹善之欲有诸己也。培其根而达其枝，则本各滋息而长矣，修其本而达其末，则物各触类而长矣。是故耳目口体物也，心为本，而视听食息其末也。喜怒忧惧无节於内，胡为物交物引之而去乎？必使心能为身之本，明於庶物而后已。父子兄弟物也，自孝弟慈推之，则身为本而絜矩其末也，好恶胡为而偏乎？必使身能为家国之本，至诚动物而后已。天下大矣，始乎格物，先事者也。理自理，欲自欲，则本根各异，物既格矣，至於天下平，后得者也。人人亲其亲，长其长，物各付物，则枝叶亦各不同焉。惟明也，辨物之理欲而至善存；惟诚也，成物之始终而大道得。孔子之诚身，不过乎物，孟子之万物皆备，反身而诚，皆反本之谓也。或曰：“礼乐刑政之道，鸟兽草木之名，莫非物也，汎而格诸？”曰：“否，否！本则身，厚则伦，经不云乎？其本乱而末治者否矣，其所厚者薄，而其所薄者厚，未之有也。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="芒种" class="heading-element">&lt;span>芒种&lt;/span>
 &lt;a href="#%e8%8a%92%e7%a7%8d" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>太极图说&lt;/strong>
&lt;em>（宋）周敦颐&lt;/em>&lt;br>
无极而太极。太极动而生阳，动极而静，静而生阴，静极复动。一动一静，互为其根；分阴分阳，两仪立焉。阳变阴合而生水火木金土，五气顺布，四时行焉。五行一阴阳也，阴阳一太极也，太极本无极也。五行之生也，各一其性。无极之真，二五之精，妙合而凝。“乾道成男，坤道成女。”二气交感，化生万物，万物生生而变化无穷焉。&lt;br>
唯人也得其秀而最灵。形既生矣，神发知矣，五性感动而善恶分，万事出矣。圣人定之以中正仁义[自注：圣人之道，仁义中正而已矣]而主静[自注：无欲故静]，立人极焉。&lt;br>
故圣人“与天地合其德，日月合其明，四时合其序，鬼神合其吉凶”，君子修之吉，小人悖之凶。故曰：“立天之道，曰阴与阳。立地之道，曰柔与刚。立人之道，曰仁与义。”又曰：“原始反终，故知死生之说。”大哉易也，斯其至矣！&lt;/p>
&lt;/blockquote>
&lt;h3 id="夏至" class="heading-element">&lt;span>夏至&lt;/span>
 &lt;a href="#%e5%a4%8f%e8%87%b3" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>静坐说&lt;/strong>
&lt;em>（明）刘宗周&lt;/em>&lt;br>
人生终日扰扰也，一着归根复命处，乃在向晦时，即天地万物，不外此理。于此可悟学问宗旨，只是主静也。此处工夫最难下手，姑为学者设方便法，且教之静坐。日用之间，除应事接物外，苟有余刻，且静坐。坐间本无一切事，即以无事付之，即无一切事，亦无一切心，无心之心，正是本心。瞥起则放下，沾滞则扫除，只与之常惺惺可也。此时伎俩，不合眼，不掩耳，不趺跏，不数息，不参话头，只在寻常日用中。有时倦则起，有时感则应，行住坐卧，都在静观，食息起居，都作静会。昔人所谓勿忘勿助间，未尝致纤毫之力，此其真消息也。故程子每见人静坐，便叹其善学，善学云者，只此是求放心亲切工夫。从此入门，即从此究竟，非徒小小方便而已。会得时立地圣域，不会得时终身只是狂驰了，更无别法可入。不会静坐，且学坐而已。学坐不成，更论恁学？坐如尸，坐时习学者且从整齐严肃入，渐进于自然。《诗》云：“相在尔室，尚不愧于屋漏。”又曰：“神之格思，不可度思，矧可射思。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="小暑" class="heading-element">&lt;span>小暑&lt;/span>
 &lt;a href="#%e5%b0%8f%e6%9a%91" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>正心原&lt;/strong>
&lt;em>（明）李经纶&lt;/em>&lt;br>
心也者，神明之舍，心不可以专神，而神则寓宅於心者也。神贵静，静则性全而仁义之体立，神贵明，明则思睿而仁义之用行。曰寂，曰明，而心之本体正矣。欲多则荡，动极则昏，事物无形，虚静以养中可也。而常情有无故之感，事为之著安而和行可也；而常情有物胜之动，於是乎昏荡生，而寂明者失矣，此固无主之心，而心失其正者也。若夫意存於天理，而私妄难以绝其根，意存乎王道，而利害得以冲其志，其为昏荡一也。邪妄绝矣，而可为之事，不免生心以系事；利害妄矣、而欲为之事，不免持心以必为。非邪妄利害之私，而终留喜怒之形声，亦不可得而寂明也。然则寂明无累者，其惟圣人之心正乎？方其静也，物之未感，我之无情，至虚独觉，而影响俱无也；及其动也，妍媸在物，精凝在我，至灵常止，而好恶不作也；其复而之静也，与化俱往，宾去主存，而又影响之俱无也，是正心之义也。或曰：“何思何虑，圣人无故而不感，忘食以思，岂有故之感乎？寂然不动，圣人有心而无为，不思则罔，岂无为之心乎？”圣人之心，所不累者身之情，所欲察者天之理，无思无为者洗心以神德，思睿作圣者精义以穷神。累情之心，为意必，意必则私，私则动；精义之心，为性命，性命则公，公则平，何动之有哉？朱子曰：“静而常觉，动而常止，此人心之妙。”明道曰：“所谓定者，动亦定，无将迎，无内外，正心之谓也。”心与意，诚与正，相似而难辨也，作《正心原》。&lt;/p>
&lt;/blockquote>
&lt;h3 id="大暑" class="heading-element">&lt;span>大暑&lt;/span>
 &lt;a href="#%e5%a4%a7%e6%9a%91" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>敬斋箴&lt;/strong>
&lt;em>（宋）朱熹&lt;/em>&lt;br>
正其衣冠，尊其瞻视。潜心以居，对越上帝。足容必重，手容必恭。择地而蹈，折旋蚁封。出门如宾，承事如祭。战战兢兢，罔敢或易。守口如甁，防意如城。洞洞属属，罔敢或轻。不东以西，不南以北。当事而存，靡他其适。弗贰以二，弗参以三。惟心惟一，万变是监。从事于斯，是曰持敬。动静弗违，表里交正。须臾有间，私欲万端。不火而热，不冰而寒。毫厘有差，天壤易处。三纲既沦，九法亦斁。于乎小子，念哉敬哉！墨卿司戒，敢告灵台。&lt;/p>
&lt;/blockquote>
&lt;h3 id="立秋" class="heading-element">&lt;span>立秋&lt;/span>
 &lt;a href="#%e7%ab%8b%e7%a7%8b" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>慎独论&lt;/strong>
&lt;em>（明）黄佐&lt;/em>&lt;br>
道也者，无有精粗、大小、远迩、微显，格天地，济民物，日费而用之，不可得而尽也。正万目以视之，而莫知其所繇也，故曰“君子之道，费而隐”。得之者，盖或寡矣，必也敬乎？《易》以衣袽言戒，履霜言慎，目睹者也；以荐雷言恐惧，耳闻者也。不睹而亦戒慎焉，不闻而亦恐惧焉，虽青天白日之下，稠人广坐之中，其暗处细事，必自知之。及其微有迹也，诗云“无”曰“不显”，“莫予”云“觏”。韩婴曰：“匹夫匹妇，会於墙阴，而明日有传之者矣。男女大欲不正，则放辟邪侈，将靡不为焉，天命不能须臾存矣。”是故君子慎独，必造端乎夫妇，正其源也。朱子曰：“有天地后此气常运，有此身后此心常发，要於常运中见太极，常发中见本性。”岂非顾諟之功邪？欲既遏矣，惟理是安，日用常行，念念精察，则此心全体虚明洞彻，天何言哉？昭昭於此。已发者往，未发者来，逝者如斯，澄渟於此。充满流动，如川之不息，天之不穷，内外本末，体用动静，洞然无一毫之间，而鸢飞鱼跃，触处朗然也。存者存此而已，养者养此而已。必有事焉而勿正，心勿忘，勿助长也，至此则从容中道，浩然之气其生於性矣乎？及其成功也，自其灿然时出者言，则谓之圣。圣则知命以尽性，故曰“如天如渊”。自其浑然真切者言，则谓之仁。仁则尽性以至命，故曰“其渊其天”。敬以达诚，斯其至矣。&lt;/p>
&lt;/blockquote>
&lt;h3 id="处暑" class="heading-element">&lt;span>处暑&lt;/span>
 &lt;a href="#%e5%a4%84%e6%9a%91" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>观心说&lt;/strong>
&lt;em>朱熹&lt;/em>&lt;br>
心则一也，以正不正而异其名耳。惟精唯一，则居其正而审其差者也，拙其异而反其同者也。能如是，则信执其中而无过不及之骗矣：非以道为一心，人为一心，而又有一心以精一之也。夫谓操而存者，非彼操此而存之也；舍而亡者，非以彼舍此而亡之也；心而自操，则亡者存；舍而不操，则存者亡耳。然其操之也，亦曰不使旦昼之所为得以捁亡其仁义之良心云尔，非块然兀坐以守其迥然不用之知觉，而谓之操存也。若尽心云者，则格物穷理，廓然贯通，而有以极夫心之所具之理也；存心云者，则“敬以直内，义以方外”，若前所谓精一操存之道也。故尽其心而可以知性知天，以其体之不蔽而有以究夫理之自然也；存心而可以养性事天，以其体之不失而有以顺夫理之自然也。是岂以心尽心，以心存心，如两物之相持而不相舍。若参前倚衡之云者，则为忠信笃敬而发也；盖曰忠信笃敬不忘乎心，则无所适而不见其在是云尔，亦非有以见夫心之谓也。且身在舆而心倚衡，是果何理也耶。&lt;/p>
&lt;/blockquote>
&lt;h3 id="白露" class="heading-element">&lt;span>白露&lt;/span>
 &lt;a href="#%e7%99%bd%e9%9c%b2" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>识仁篇&lt;/strong>
&lt;em>程颢&lt;/em>&lt;br>
学者须先识仁。仁者，浑然与物同体，义、礼、智、信皆仁也。识得此理，以诚敬存之而已，不须防检，不须穷索。若心懈，则有防；心苟不懈，何防之有！理有未得，故须穷索；存久自明，安待穷索！此道与物无对，「大」不足以明之。天地之用，皆我之用。孟子言「万物皆备于我」，须「反身而诚」，乃为大乐。若反身未诚，则犹是二物有对，以己合彼，终未有之，又安得乐！《订顽》意思，（横渠西铭，旧名《订顽》。）乃备言此体，以此意存之，更有何事。「必有事焉而勿正，心勿忘，勿助长」，未尝致纤毫之力，此其存之之道。若存得，便合有得。盖良知良能，元不丧失。以昔日习心未除，却须存习此心，久则可夺旧习。此理至约，惟患不能守。既能体之而乐，亦不患不能守也。&lt;/p>
&lt;/blockquote>
&lt;h3 id="秋分" class="heading-element">&lt;span>秋分&lt;/span>
 &lt;a href="#%e7%a7%8b%e5%88%86" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>为善说&lt;/strong>
&lt;em>（明）高攀龙&lt;/em>&lt;br>
为善必须明善，善者性也，性者人生而静是也。人生而静时，胸中何曾有一物来？其营营扰扰者，皆有知识以后，日添出来，非其本然也。即是添来，今宜减去，减之又减，以至于减无可减，方始是性，方始是善。何者？人心湛然无一物时，乃是仁义礼智也。为善者，乃是仁义礼智之事也。&lt;/p>
&lt;/blockquote>
&lt;h3 id="寒露" class="heading-element">&lt;span>寒露&lt;/span>
 &lt;a href="#%e5%af%92%e9%9c%b2" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>诚意原&lt;/strong>
&lt;em>（明）李经纶&lt;/em>&lt;br>
意非心之发也，心之发则情也。意从心从曰从心。心立欲为之意，而非为之意，而必为之主宰乎知觉之中也。寂者心之体，而主忠以为之根。知天之德，即我之德，而意专主乎天德，立心以的之，闲邪以存之，是宁静之中，而精神之有所注者也。感者心之用，则主信以为之干。知人之道，即我之道，而意专主乎人道，定其向，决其趋，盖攻取之中，而精神之有所守者也。无事而灵根植焉，画一无二而好色恶臭之几明，有事而美干达焉，致命遂志，而好色恶臭之几决，故不知意为身心之干，则视之也轻，不知几为万事之本，则其功也略，我图圣功，莫先诚意，作《诚意原》。&lt;/p>
&lt;/blockquote>
&lt;h3 id="霜降" class="heading-element">&lt;span>霜降&lt;/span>
 &lt;a href="#%e9%9c%9c%e9%99%8d" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>心性图说&lt;/strong>
&lt;em>（明）湛若水&lt;/em>&lt;br>
性者，天地万物一体者也；浑然宇宙，其气同也；心也者，体天地万物而不遗者也。性也者，心之生理也，心性非二也。譬之谷焉，具生意而未发，未发故浑然而不可见。及其发也，恻隐、羞恶、辞让、是非萌焉，仁义礼智自此焉始分矣，故谓之四端。端也者，始也，良心发见之始也。是故始之敬者，戒惧慎独以养其中也，中立而和发焉，万事万化自此焉达，而位育不外是矣。故位育非有加也，全而归之者耳。终之敬者，即始之敬而不息焉者也。曰：“何以小圈？”曰：“心无所不贯也。”“何以大圈？”曰：“心无所不包也。包与贯实非二也，故心也者，包乎天地万物之外，而贯乎天地万物之中者也。中外非二也，天地无内外，心亦无内外，极言之耳矣。故谓内为本心，而外天地万事以为心者，小之为心也甚矣。”&lt;/p>
&lt;/blockquote>
&lt;h3 id="立冬" class="heading-element">&lt;span>立冬&lt;/span>
 &lt;a href="#%e7%ab%8b%e5%86%ac" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>命说&lt;/strong>
&lt;em>（明）孙慎行&lt;/em>&lt;br>
《易》云“利贞”者，性情也。又云：“各正性命”。夫性其命者，所以合天，性其情者，所以坊人。其本则所谓刚健中正，纯粹精也。而世说天命者，若除理义外，别有一种气运之命，杂糅不齐者。然因是则有理义之性，气质之性。又因是则有理义之心，形气之心。三者异名而同病。总之不过为为不善者作推解说。夫世之为善者少，而不为善者多，则是天之生善人也少，而生不善人也多，人之得性情之善于天也少，而得性情之不善於天也多。诬天诬人，莫此为甚，以是有变化气质之说。夫气质善，而人顺之使善，是以人合天，何极易简？若气质本有不善，而人欲变化之使善，是以人胜天，何极艰难？且使天而可胜，即荀子矫性为善，其言不异，而世非之何哉？孟子曰：“天之高也，星辰之远也，苟求其故，千岁之日至，可坐而致也。”是天之气运之行，无不齐也。而独命人于气运之际，顾有不齐乎哉？《中庸》曰：“文王之所以为文也，纯亦不已。”夫使天果不齐，是纯独文之所有，而举世性情之所无也。又非独举世性情之所无，而亦天命之所本无也。将所谓纯粹精者，何在乎？&lt;/p>
&lt;/blockquote>
&lt;h3 id="小雪" class="heading-element">&lt;span>小雪&lt;/span>
 &lt;a href="#%e5%b0%8f%e9%9b%aa" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>辨学录（善利辨）&lt;/strong>
&lt;em>（明）冯从吾&lt;/em>&lt;br>
吾儒曰：“喻利之心不可有。”异端曰：“喻义之心不可有。”吾儒曰：“为恶之心不可有。”异端曰：“为善之心不可有。”或诘之曰：“喻义之心不可有，喻利之心可有乎？为善之心不可有，为恶之心可有乎？”彼则曰：“喻义之心且不可有，况喻利乎？为善之心且不可有，况为恶乎？”如此为言，虽中人亦知其非。彼又恐人之非之也，复倡为一切总归於无心之说，以为人之心体本空，无利、无义、无善、无恶者，其本体也。必也无喻利心，并无喻义心，并无无喻义心；无为恶心，并无为善心，并无无为善心。一切总归於无心，方合本体耳。说至此，虽高明莫知其非矣。不知正是发明喻义之心不可有，为善之心不可有处，奈何不察而误信之耶？且义原非外，性原是善，心之本体原是有善无恶的，可见必有喻义为善之心，而后为合本体也。今欲一切总归於无心，安在其为合本体耶？况人心易放而难收，尽去喻义，犹恐喻利；尽去为善，犹恐为恶。今欲一切总归於无心，窃恐义无而利未必无，善无而恶未必无，反为本体之累不小也。又况义利只有两途，人心原无二用，出於义即入於利，出於善即入於恶，岂有无义无利，无善无恶，一切总归於无心之理乎？太抵义原非外，特自有其义之心不可有，而喻义之心必不可无；性原是善，特自有其善之心不可有，而为善之心必不可无。总是喻之又喻，以至於化，为之又为，以至於忘，造到上天之载，无声无臭处，只好说有喻义之心而至於化，有为善之心而至于忘，有喻义为善之心，而无声臭之可儗。亦说不得喻义之心不可有，为善之心不可有。今云云者，所谓小人而无忌惮者也。&lt;/p>
&lt;/blockquote>
&lt;h3 id="大雪" class="heading-element">&lt;span>大雪&lt;/span>
 &lt;a href="#%e5%a4%a7%e9%9b%aa" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>仁心说&lt;/strong>
&lt;em>朱熹&lt;/em>&lt;br>
天地以生物为心者也，而人物之生，又各得夫天地之心以为心者也。故语心之德，虽其总摄贯通，无所不备，然一言以蔽之，则曰仁而已矣。请试详之。盖天地之心，其德有四，曰元、亨、利、贞，而元无不统。其运行焉，则为春、夏、秋、冬之序，而春生之气无所不通。故人之为心，其德亦有四，曰仁、义、礼、智，而仁无不包。其发用焉，则爱恭宜别之情，而恻隐之心无所不贯。故论天地之心者，则曰乾元、坤元，则四德之体用亦不待遍举而该。盖仁之为道，乃天地生物之心，即物而在。情之未发，而此体已具；情之既发，而其用不穷。诚能体而存之，则众善之源、百行之本莫不在是。此孔门之教所以必使学者汲汲于求仁也。其言有曰：“克己复礼为仁。”言能克去己私，复乎天理，则此心之体无不在，而此心之用无不行也。又曰：“居处恭，执事敬，与人忠”，则亦所以行此心也。又曰：“求仁得仁”，则以让国而逃，谏伐而饿为能不失乎此心也。又曰：“杀身成仁”，则以欲甚于生、恶甚于死为能不害乎此心也。此心何也也？在天地则共坱然生物之心，在人则温然爱人利物之心，包四德而贯四端者也。&lt;/p>
&lt;/blockquote></description></item><item><title>读 Show Your Work</title><link>https://simplecoding.fun/posts/2023/12/reading-show-your-work/</link><pubDate>Wed, 06 Dec 2023 19:36:57 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2023/12/reading-show-your-work/</guid><category domain="https://simplecoding.fun/categories/%E8%AF%BB%E4%B9%A6/">读书</category><description>&lt;p>最近读了Austin Kleon的&lt;a href="https://book.douban.com/subject/25857796/"target="_blank" rel="external nofollow noopener noreferrer">Show your work&lt;/a>，我读的是英文版，书中的观点和方法很值得借鉴。在这个互联网时代，如果你想扩大自己的影响力，或者单纯想在网上分享自己的知识和见解，但不得其法，可以看一下这本小书，会很有帮助。下面是我读这本书时所做的一些摘录笔记：&lt;/p>
&lt;blockquote>
&lt;p>In order to be found, you have to be findable.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The best way to get started on the path to sharing your work is to think about what you want to learn, and make a commitment to learning it in front of others. Find a scenius, pay attention to what others are sharing, and then start taking note of what they’re not sharing. Be on the lookout for voids that you can fill with your own efforts, no matter how bad they are at first.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Share what you love, and the people who love the same things will find you.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything—all external expectations, all pride, all fear of embarrassment or failure—these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked.&amp;rdquo; —Steve Jobs&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>But today, by taking advantage of the Internet and social media, an artist can share whatever she wants, whenever she wants, at almost no cost.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>But human beings are interested in other human beings and what other human beings do.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>By letting go of our egos and sharing our process, we allow for the possibility of people having an ongoing connection with us and our work, which helps us move more of our product.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>How can you show your work even when you have nothing to show? The first step is to scoop up the scraps and the residue of your process and shape them into some interesting bit of media that you can share. You have to turn the invisible into something other people can see.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Become a documentarian of what you do. Start a work journal: Write your thoughts down in a notebook, or speak them into an audio recorder. Keep a scrapbook.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Once a day, after you’ve done your day’s work, go back to your documentation and find one little piece of your process that you can share. Where you are in your process will determine what that piece is. If you’re in the very early stages, share your influences and what’s inspiring you. If you’re in the middle of executing a project, write about your methods or share works in progress. If you’ve just completed a project, show the final product, share scraps from the cutting-room floor, or write about what you learned.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Social media sites are the perfect place to share daily updates.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Don’t show your lunch or your latte; show your work.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Of course, don’t let sharing your work take precedence over actually doing your work. If you’re having a hard time balancing the two, just set a timer for 30 minutes. Once the timer goes off, kick yourself off the Internet and get back to work.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>you want the work you post online to be copied and spread to every corner of the Internet, so don’t post things online that you’re not ready for everyone in the world to see.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Be open, share imperfect and unfinished work that you want feedback on, but don’t share absolutely everything.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The act of sharing is one of generosity—you’re putting something out there because you think it might be helpful or entertaining to someone on the other side of the screen.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you’re unsure about whether to share something, let it sit for 24 hours. Put it in a drawer and walk out the door. The next day, take it out and look at it with fresh eyes. Ask yourself, &amp;ldquo;Is this helpful? Is it entertaining? Is it something I’d be comfortable with my boss or my mother seeing?&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>A blog is the ideal machine for turning flow into stock: One little blog post is nothing on its own, but publish a thousand blog posts over a decade, and it turns into your life’s work.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Don’t think of your website as a self-promotion machine, think of it as a self-invention machine. Online, you can become the person you really want to be. Fill your website with your work and your ideas and the stuff you care about.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Where do you get your inspiration? What sorts of things do you fill your head with? What do you read? Do you subscribe to anything? What sites do you visit on the Internet? What music do you listen to? What movies do you see? Do you look at art? What do you collect? What’s inside your scrapbook? What do you pin to the corkboard above your desk? What do you stick on your refrigerator? Who’s done work that you admire? Who do you steal ideas from? Do you have any heroes? Who do you follow online? Who are the practitioners you look up to in your field? Your influences are all worth sharing because they clue people in to who you are and what you do—sometimes even more than your own work.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>When you find things you genuinely enjoy, don’t let anyone else make you feel bad about it. Don’t feel guilty about the pleasure you take in the things you enjoy. Celebrate them. Being open and honest about what you like is the best way to connect with people who like those things, too.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you share the work of others, it’s your duty to make sure that the creators of that work get proper credit. Don’t share things you can’t properly credit. Find the right credit, or don’t share.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Attribution is all about providing context for what you’re sharing: what the work is, who made it, how they made it, when and where it was made, why you’re sharing it, why people should care about it, and where people can see some more work like it. Online, the most important form of attribution is a hyperlink pointing back to the website of the creator of the work.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>What if you want to share something and you don’t know where it came from or who made it? The answer: Don’t share things you can’t properly credit. Find the right credit, or don’t share.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The stories you tell about the work you do have a huge effect on how people feel and what they understand about your work, and how people feel and what they understand about your work effects how they value it.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you want to be more effective when sharing yourself and your work, you need to become a better storyteller. You need to know what a good story is and how to tell one.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The most important part of a story is its structure. A good story structure is tidy, sturdy, and logical. Sometimes we have to do a lot of cropping and editing to fit our lives into something that resembles a story.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;Once upon a time, there was _____. Every day, _____. One day, _____. Because of that, _____. Because of that, _____. Until finally, _____.&amp;rdquo; Pick your favorite story and try to fill in the blanks. It’s striking how often it works.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>This simple formula can be applied to almost any type of work project: There’s the initial problem, the work done to solve the problem, and the solution.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Whether you’re telling a finished or unfinished story, always keep your audience in mind. Speak to them directly in plain language. Value their time. Be brief. Learn to speak. Learn to write. Use spell-check. You’re never “keeping it real” with your lack of proofreading and punctuation, you’re keeping it unintelligible.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You should be able to explain your work to a kindergartner, a senior citizen, and everybody in between. Of course, you always need to keep your audience in mind: The way you explain your work to your buddies at the bar is not the way you explain your work to your mother.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The minute you learn something, turn around and teach it to others. Share your reading list. Point to helpful reference materials. Create some tutorials and post them online. Teaching people doesn’t subtract value from what you do, it actually adds to it.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you want fans, you have to be a fan first. If you want to be accepted by a community, you have to first be a good citizen of that community. If you’re only pointing to your own stuff online, you’re doing it wrong. You have to be a connector. Don’t waste your time reading articles about how to get more followers. Don’t waste time following people online just because you think it’ll get you somewhere. Don’t talk to people you don’t want to talk to, and don’t talk about stuff you don’t want to talk about. If you want followers, be someone worth following.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Make stuff you love and talk about stuff you love and you’ll attract people who love that kind of stuff. It’s that simple.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If, after hanging out with someone you feel worn out and depleted, that person is a vampire. If, after hanging out with someone you still feel full of energy, that person is not a vampire. Of course, The Vampire Test works on many things in our lives, not just people—you can apply it to jobs, hobbies, places, etc.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you’ve been friends for a while with somebody online and you live in the same town, ask them if they want to grab a coffee. If you want to go all out, offer to buy them lunch. If you’re traveling, let your online friends know you’re going to be in town.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Meeting people online is awesome, but turning them into IRL (in real life) friends is even better.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>When you put your work out into the world, you have to be ready for the good, the bad, and the ugly. The more people come across your work, the more criticism you’ll face. You can’t control what sort of criticism you receive, but you can control how you react to it.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If you have work that is too sensitive or too close to you to be exposed to criticism, keep it hidden.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The first step in evaluating feedback is sizing up who it came from. You want feedback from people who care about you and what you do. Be extra wary of feedback from anybody who falls outside of that circle.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Do you have a troll problem? Use the block button on social media sites. Delete nasty comments.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The easiest way to do this is to simply ask for donations: Put a little virtual tip jar or a donate now button on your website. These links do well with a little bit of human copy, such as “Like this? Buy me a coffee.”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Beware of selling the things that you love: When people are asked to get out their wallets, you find out how much they really value what you do.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You’ll notice a pattern with technology—often the most boring and utilitarian technologies are the ones that stick around the longest. Email is decades and decades old, but it’s nowhere close to being dead.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>It’s very important not to quit prematurely. If you look to artists who’ve managed to achieve lifelong careers, you detect the same pattern: They all have been able to persevere, regardless of success or failure.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Just do the work that’s in front of you, and when it’s finished, ask yourself what you missed, what you could’ve done better, or what you couldn’t get to, and jump right into the next project.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You have to have the courage to get rid of work and rethink things completely.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Look for something new to learn, and when you find it, dedicate yourself to learning it out in the open. Document your progress and share as you go so that others can learn along with you. Show your work, and when the right people show up, pay close attention to them, because they’ll have a lot to show you.&lt;/p>
&lt;/blockquote></description></item><item><title>“长征”计划-第二个500公里</title><link>https://simplecoding.fun/posts/2023/11/long-march-plan2/</link><pubDate>Thu, 16 Nov 2023 13:21:00 +0800</pubDate><author>fighter9010@gmail.com (lazypanda)</author><guid>https://simplecoding.fun/posts/2023/11/long-march-plan2/</guid><category domain="https://simplecoding.fun/categories/%E7%94%9F%E6%B4%BB/">生活</category><description>&lt;p>不知不觉已经跑了一千多公里了。&lt;/p>
&lt;p>上半年在云谷园区，每天晚饭前围着北边的小球场跑上几圈。下半年来到了南京，最开始是围着百家湖跑，后来去秦淮河对岸的那条宽敞跑道跑。最近天冷了，计划每天晚上围着单位园区跑几圈。&lt;/p>
&lt;p>这一年，跑步慢慢变成了生活中的一个习惯，如果一段时间没跑，就会觉得生活好像少了点什么。&lt;/p>
&lt;p>这一年，比较少追求跑步速度了，更多的是随心所欲，跑累了就走一段，看看路边的风景，听听路上的行人在聊些什么，走一会儿再接着跑。&lt;/p>
&lt;p>有时，看着跑步记录里不断增长的数字，还是很有些成就感的。也会感觉到更多的安心、踏实，那些跑过的路，都成为了自己人生之路的一部分。
&lt;img loading="lazy" src="https://simplecoding.fun/ox-hugo/keep2.jpg" alt="/ox-hugo/keep2.jpg" srcset="https://simplecoding.fun/ox-hugo/keep2.jpg?size=small, https://simplecoding.fun/ox-hugo/keep2.jpg?size=medium 1.5x, https://simplecoding.fun/ox-hugo/keep2.jpg?size=large 2x" data-title="/ox-hugo/keep2.jpg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/>&lt;/p></description></item></channel></rss>